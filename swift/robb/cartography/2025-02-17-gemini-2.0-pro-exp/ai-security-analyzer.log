Unable to find image 'ghcr.io/xvnpw/ai-security-analyzer:latest' locally
latest: Pulling from xvnpw/ai-security-analyzer
1f3e46996e29: Pulling fs layer
dfb81f221332: Pulling fs layer
69d04f35a207: Pulling fs layer
5c3947958a83: Pulling fs layer
b9be2ce5276b: Pulling fs layer
8b438fc1cd11: Pulling fs layer
28d645c00242: Pulling fs layer
921df71b230f: Pulling fs layer
c457853b6d82: Pulling fs layer
37e00e2d9431: Pulling fs layer
d3f883494790: Pulling fs layer
b9be2ce5276b: Waiting
c457853b6d82: Waiting
8b438fc1cd11: Waiting
37e00e2d9431: Waiting
28d645c00242: Waiting
d3f883494790: Waiting
921df71b230f: Waiting
5c3947958a83: Waiting
1f3e46996e29: Download complete
dfb81f221332: Verifying Checksum
dfb81f221332: Download complete
1f3e46996e29: Pull complete
5c3947958a83: Verifying Checksum
5c3947958a83: Download complete
69d04f35a207: Verifying Checksum
69d04f35a207: Download complete
b9be2ce5276b: Download complete
28d645c00242: Verifying Checksum
28d645c00242: Download complete
921df71b230f: Verifying Checksum
921df71b230f: Download complete
8b438fc1cd11: Verifying Checksum
8b438fc1cd11: Download complete
37e00e2d9431: Download complete
d3f883494790: Verifying Checksum
d3f883494790: Download complete
dfb81f221332: Pull complete
69d04f35a207: Pull complete
5c3947958a83: Pull complete
b9be2ce5276b: Pull complete
c457853b6d82: Verifying Checksum
c457853b6d82: Download complete
8b438fc1cd11: Pull complete
28d645c00242: Pull complete
921df71b230f: Pull complete
c457853b6d82: Pull complete
37e00e2d9431: Pull complete
d3f883494790: Pull complete
Digest: sha256:de5354acec6e1b13185500d521e5a9e27b7ac4e65c267bb3a5c82deb7c8475f5
Status: Downloaded newer image for ghcr.io/xvnpw/ai-security-analyzer:latest
2025-02-17 03:41:45,902 - __main__ - INFO - Starting AI Security Analyzer
2025-02-17 03:41:45,963 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 1
2025-02-17 03:43:07,865 - ai_security_analyzer.graphs - INFO - Actual token usage: 12187
2025-02-17 03:43:07,869 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739763790.128484       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-17 03:43:14,381 - __main__ - INFO - Starting AI Security Analyzer
2025-02-17 03:43:14,439 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-17 03:43:38,651 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-17 03:44:10,139 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-17 03:44:10,261 - langchain_google_genai.chat_models - WARNING - Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 Resource has been exhausted (e.g. check quota)..
2025-02-17 03:46:30,047 - ai_security_analyzer.graphs - INFO - Actual token usage: 27846
2025-02-17 03:46:30,056 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739763992.316902       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-17 03:46:36,597 - __main__ - INFO - Starting AI Security Analyzer
2025-02-17 03:46:36,657 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-17 03:46:56,449 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-17 03:47:20,154 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-17 03:50:17,828 - ai_security_analyzer.graphs - INFO - Actual token usage: 30133
2025-02-17 03:50:17,839 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739764220.086729       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-17 03:50:24,326 - __main__ - INFO - Starting AI Security Analyzer
2025-02-17 03:50:24,383 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 4
2025-02-17 03:50:55,579 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 4
2025-02-17 03:51:14,924 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 4
2025-02-17 03:51:27,909 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 4 of 4
2025-02-17 03:51:57,570 - ai_security_analyzer.graphs - ERROR - Graph execution failed: Invalid json output: ```json
{
  "attack_tree_objective": "Exfiltrate Sensitive Data or Gain Unauthorized Control {CN}",
  "attack_sub_tree_visualization": "Exfiltrate Sensitive Data or Gain Unauthorized Control {CN}\n    /                               \\\n   /                                 \\\nExploit Cartography Directly [HR]     Leverage Cartography's Data [HR]\n   /        |                         /          |          \\\n  /         |                        /           |           \\\nVulnerabilities  Misconfiguration   Use Cartography   Abuse Cartography's  Phishing/Social\nin Cartography   of Cartography [HR] Data for Targeted   Knowledge of Weak  Engineering [HR]\nCode [HR]                            Attacks [HR]     Points [HR]          to gain access to\n /      \\                                                                  Cartography User {CN}\n/\        \\\nCode     Access Cartography                                                  Exploit Known\nInjection  Database Directly {CN}                                             Vulnerabilities\n(Neo4j)                                                                      in Target\n[HR] {CN}                                                                    Infrastructure {CN} [HR]",
  "attack_sub_tree_paths": [
    {
      "title": "Exploit Cartography Directly [HR]",
      "text": "*   **Vulnerabilities in Cartography Code [HR]**\n    *   **Code Injection (Neo4j) [HR] {CN}**:\n        *   **Description:** An attacker exploits insufficient input sanitization in Cartography to inject malicious Cypher queries into the Neo4j database. This could allow data exfiltration, modification, deletion, or even remote code execution on the Neo4j server.\n        *   **Likelihood:** Medium\n        *   **Impact:** Very High\n        *   **Effort:** Medium\n        *   **Skill Level:** Medium to High\n        *   **Detection Difficulty:** Medium\n        *   **Mitigation Strategies:**\n            *   Implement rigorous input validation and sanitization for all data used in Cypher queries.\n            *   Use parameterized queries (prepared statements) exclusively.\n            *   Enforce the principle of least privilege for the Neo4j user account used by Cartography.\n            *   Conduct regular security audits and penetration testing, focusing on Cypher injection.\n\n*   **Misconfiguration of Cartography [HR]**\n    *   **Description:** Cartography is deployed with insecure settings, such as an exposed administrative interface, weak or default credentials, or insufficient network segmentation. This allows an attacker to gain unauthorized access to Cartography's functionality.\n        *   **Likelihood:** Medium\n        *   **Impact:** High\n        *   **Effort:** Very Low\n        *   **Skill Level:** Very Low\n        *   **Detection Difficulty:** Low\n        *   **Mitigation Strategies:**\n            *   Provide secure default configurations.\n            *   Create comprehensive documentation on secure configuration.\n            *   Implement automated configuration checks.\n            *   Use network segmentation to isolate the Cartography instance.\n\n* **Access Cartography Database Directly {CN}**\n    * **Description:** This is a critical step that can be reached through various vulnerabilities (like code injection) or misconfigurations. Direct database access allows the attacker to bypass Cartography's intended interface and directly interact with the stored data.\n    * **Likelihood:** Medium (Conditional on other vulnerabilities)\n    * **Impact:** Very High\n    * **Effort:** Low (Once access is gained)\n    * **Skill Level:** Low\n    * **Detection Difficulty:** Medium\n    * **Mitigation Strategies:**\n        *   Strong database authentication and authorization (RBAC).\n        *   Encryption at rest and in transit.\n        *   Regular database backups.\n        *   Database auditing and monitoring.\n        *   Network segmentation."
    },
    {
      "title": "Leverage Cartography's Data [HR]",
      "text": "*   **Use Cartography Data for Targeted Attacks [HR]**\n    *   **Description:** An attacker leverages the comprehensive infrastructure map provided by Cartography to identify specific targets for further attacks. This significantly increases the efficiency and effectiveness of subsequent attacks.\n        *   **Likelihood:** High (If Cartography data is accessible)\n        *   **Impact:** Very High\n        *   **Effort:** Low (Information is readily available)\n        *   **Skill Level:** Varies (Depends on the subsequent attack)\n        *   **Detection Difficulty:** Medium to High (Requires monitoring of attacker activity *after* they've used Cartography data)\n        *   **Mitigation Strategies:**\n            *   Limit access to Cartography data to authorized personnel.\n            *   Monitor for unusual access patterns to Cartography data.\n            *   Implement strong security controls on the target infrastructure to mitigate the impact of targeted attacks.\n\n*   **Abuse Cartography's Knowledge of Weak Points/Misconfigurations [HR]**\n    *   **Description:** Cartography, by its nature, identifies misconfigurations and potential vulnerabilities in the cloud infrastructure. An attacker uses this information to directly exploit these weaknesses.\n        *   **Likelihood:** High (If Cartography data is accessible)\n        *   **Impact:** Very High\n        *   **Effort:** Low to Medium (Depends on the specific weakness)\n        *   **Skill Level:** Varies (Depends on the specific weakness)\n        *   **Detection Difficulty:** Medium to High\n        *   **Mitigation Strategies:**\n            *   Proactively use Cartography to identify and remediate vulnerabilities *before* an attacker can exploit them.\n            *   Implement a robust vulnerability management program.\n            *   Regularly apply security patches.\n\n* **Phishing/Social Engineering [HR] to gain access to Cartography User {CN}**\n    * **Description:** Attackers target individuals with access to Cartography, using information gathered from Cartography or other sources to craft convincing phishing emails or social engineering attacks to steal their credentials.\n    * **Likelihood:** Medium to High\n    * **Impact:** High\n    * **Effort:** Low to Medium\n    * **Skill Level:** Low to Medium\n    * **Detection Difficulty:** Medium\n    * **Mitigation Strategies:**\n        *   Security awareness training for all users.\n        *   Enforce multi-factor authentication (MFA).\n        *   Conduct regular phishing simulations.\n\n*   **Exploit Known Vulnerabilities in Target Infrastructure {CN} [HR]**\n    *   **Description:** This is the final, high-impact step where the attacker uses information gathered from Cartography (or directly from the database if they gained access) to exploit known vulnerabilities in the target cloud environment.\n        *   **Likelihood:** High\n        *   **Impact:** Very High\n        *   **Effort:** Low to High (Depends on the vulnerability)\n        *   **Skill Level:** Low to High (Depends on the vulnerability)\n        *   **Detection Difficulty:** Medium to High\n        *   **Mitigation Strategies:**\n            *   Robust vulnerability and patch management programs.\n            *   Configuration management.\n            *   Least privilege principles for cloud resources.\n            *   Regular security assessments."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-02-17 03:51:57,572 - __main__ - ERROR - Application error: Invalid json output: ```json
{
  "attack_tree_objective": "Exfiltrate Sensitive Data or Gain Unauthorized Control {CN}",
  "attack_sub_tree_visualization": "Exfiltrate Sensitive Data or Gain Unauthorized Control {CN}\n    /                               \\\n   /                                 \\\nExploit Cartography Directly [HR]     Leverage Cartography's Data [HR]\n   /        |                         /          |          \\\n  /         |                        /           |           \\\nVulnerabilities  Misconfiguration   Use Cartography   Abuse Cartography's  Phishing/Social\nin Cartography   of Cartography [HR] Data for Targeted   Knowledge of Weak  Engineering [HR]\nCode [HR]                            Attacks [HR]     Points [HR]          to gain access to\n /      \\                                                                  Cartography User {CN}\n/\        \\\nCode     Access Cartography                                                  Exploit Known\nInjection  Database Directly {CN}                                             Vulnerabilities\n(Neo4j)                                                                      in Target\n[HR] {CN}                                                                    Infrastructure {CN} [HR]",
  "attack_sub_tree_paths": [
    {
      "title": "Exploit Cartography Directly [HR]",
      "text": "*   **Vulnerabilities in Cartography Code [HR]**\n    *   **Code Injection (Neo4j) [HR] {CN}**:\n        *   **Description:** An attacker exploits insufficient input sanitization in Cartography to inject malicious Cypher queries into the Neo4j database. This could allow data exfiltration, modification, deletion, or even remote code execution on the Neo4j server.\n        *   **Likelihood:** Medium\n        *   **Impact:** Very High\n        *   **Effort:** Medium\n        *   **Skill Level:** Medium to High\n        *   **Detection Difficulty:** Medium\n        *   **Mitigation Strategies:**\n            *   Implement rigorous input validation and sanitization for all data used in Cypher queries.\n            *   Use parameterized queries (prepared statements) exclusively.\n            *   Enforce the principle of least privilege for the Neo4j user account used by Cartography.\n            *   Conduct regular security audits and penetration testing, focusing on Cypher injection.\n\n*   **Misconfiguration of Cartography [HR]**\n    *   **Description:** Cartography is deployed with insecure settings, such as an exposed administrative interface, weak or default credentials, or insufficient network segmentation. This allows an attacker to gain unauthorized access to Cartography's functionality.\n        *   **Likelihood:** Medium\n        *   **Impact:** High\n        *   **Effort:** Very Low\n        *   **Skill Level:** Very Low\n        *   **Detection Difficulty:** Low\n        *   **Mitigation Strategies:**\n            *   Provide secure default configurations.\n            *   Create comprehensive documentation on secure configuration.\n            *   Implement automated configuration checks.\n            *   Use network segmentation to isolate the Cartography instance.\n\n* **Access Cartography Database Directly {CN}**\n    * **Description:** This is a critical step that can be reached through various vulnerabilities (like code injection) or misconfigurations. Direct database access allows the attacker to bypass Cartography's intended interface and directly interact with the stored data.\n    * **Likelihood:** Medium (Conditional on other vulnerabilities)\n    * **Impact:** Very High\n    * **Effort:** Low (Once access is gained)\n    * **Skill Level:** Low\n    * **Detection Difficulty:** Medium\n    * **Mitigation Strategies:**\n        *   Strong database authentication and authorization (RBAC).\n        *   Encryption at rest and in transit.\n        *   Regular database backups.\n        *   Database auditing and monitoring.\n        *   Network segmentation."
    },
    {
      "title": "Leverage Cartography's Data [HR]",
      "text": "*   **Use Cartography Data for Targeted Attacks [HR]**\n    *   **Description:** An attacker leverages the comprehensive infrastructure map provided by Cartography to identify specific targets for further attacks. This significantly increases the efficiency and effectiveness of subsequent attacks.\n        *   **Likelihood:** High (If Cartography data is accessible)\n        *   **Impact:** Very High\n        *   **Effort:** Low (Information is readily available)\n        *   **Skill Level:** Varies (Depends on the subsequent attack)\n        *   **Detection Difficulty:** Medium to High (Requires monitoring of attacker activity *after* they've used Cartography data)\n        *   **Mitigation Strategies:**\n            *   Limit access to Cartography data to authorized personnel.\n            *   Monitor for unusual access patterns to Cartography data.\n            *   Implement strong security controls on the target infrastructure to mitigate the impact of targeted attacks.\n\n*   **Abuse Cartography's Knowledge of Weak Points/Misconfigurations [HR]**\n    *   **Description:** Cartography, by its nature, identifies misconfigurations and potential vulnerabilities in the cloud infrastructure. An attacker uses this information to directly exploit these weaknesses.\n        *   **Likelihood:** High (If Cartography data is accessible)\n        *   **Impact:** Very High\n        *   **Effort:** Low to Medium (Depends on the specific weakness)\n        *   **Skill Level:** Varies (Depends on the specific weakness)\n        *   **Detection Difficulty:** Medium to High\n        *   **Mitigation Strategies:**\n            *   Proactively use Cartography to identify and remediate vulnerabilities *before* an attacker can exploit them.\n            *   Implement a robust vulnerability management program.\n            *   Regularly apply security patches.\n\n* **Phishing/Social Engineering [HR] to gain access to Cartography User {CN}**\n    * **Description:** Attackers target individuals with access to Cartography, using information gathered from Cartography or other sources to craft convincing phishing emails or social engineering attacks to steal their credentials.\n    * **Likelihood:** Medium to High\n    * **Impact:** High\n    * **Effort:** Low to Medium\n    * **Skill Level:** Low to Medium\n    * **Detection Difficulty:** Medium\n    * **Mitigation Strategies:**\n        *   Security awareness training for all users.\n        *   Enforce multi-factor authentication (MFA).\n        *   Conduct regular phishing simulations.\n\n*   **Exploit Known Vulnerabilities in Target Infrastructure {CN} [HR]**\n    *   **Description:** This is the final, high-impact step where the attacker uses information gathered from Cartography (or directly from the database if they gained access) to exploit known vulnerabilities in the target cloud environment.\n        *   **Likelihood:** High\n        *   **Impact:** Very High\n        *   **Effort:** Low to High (Depends on the vulnerability)\n        *   **Skill Level:** Low to High (Depends on the vulnerability)\n        *   **Detection Difficulty:** Medium to High\n        *   **Mitigation Strategies:**\n            *   Robust vulnerability and patch management programs.\n            *   Configuration management.\n            *   Least privilege principles for cloud resources.\n            *   Regular security assessments."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE . You can try to run with --resume to resume from last checkpoint.
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739764319.822078       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-17 03:52:14,095 - __main__ - INFO - Starting AI Security Analyzer
2025-02-17 03:52:14,158 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 4
2025-02-17 03:52:41,828 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 4
2025-02-17 03:53:08,632 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 4
2025-02-17 03:53:08,732 - langchain_google_genai.chat_models - WARNING - Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 Resource has been exhausted (e.g. check quota)..
2025-02-17 03:53:37,712 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 4 of 4
2025-02-17 03:55:50,540 - ai_security_analyzer.graphs - INFO - Actual token usage: 42397
2025-02-17 03:55:50,550 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739764552.801287       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-17 03:55:56,999 - __main__ - INFO - Starting AI Security Analyzer
2025-02-17 03:55:57,057 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-17 03:56:25,077 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-17 03:57:20,584 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-17 04:00:13,600 - ai_security_analyzer.graphs - INFO - Actual token usage: 38390
2025-02-17 04:00:13,610 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739764815.923664       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
