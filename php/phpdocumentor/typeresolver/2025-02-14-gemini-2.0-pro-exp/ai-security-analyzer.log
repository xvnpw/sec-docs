Unable to find image 'ghcr.io/xvnpw/ai-security-analyzer:latest' locally
latest: Pulling from xvnpw/ai-security-analyzer
1f3e46996e29: Pulling fs layer
dfb81f221332: Pulling fs layer
69d04f35a207: Pulling fs layer
5c3947958a83: Pulling fs layer
b9be2ce5276b: Pulling fs layer
8b438fc1cd11: Pulling fs layer
28d645c00242: Pulling fs layer
921df71b230f: Pulling fs layer
c457853b6d82: Pulling fs layer
37e00e2d9431: Pulling fs layer
d3f883494790: Pulling fs layer
5c3947958a83: Waiting
b9be2ce5276b: Waiting
8b438fc1cd11: Waiting
28d645c00242: Waiting
921df71b230f: Waiting
c457853b6d82: Waiting
37e00e2d9431: Waiting
d3f883494790: Waiting
1f3e46996e29: Verifying Checksum
1f3e46996e29: Download complete
dfb81f221332: Verifying Checksum
dfb81f221332: Download complete
69d04f35a207: Verifying Checksum
69d04f35a207: Download complete
5c3947958a83: Verifying Checksum
5c3947958a83: Download complete
1f3e46996e29: Pull complete
b9be2ce5276b: Verifying Checksum
b9be2ce5276b: Download complete
28d645c00242: Verifying Checksum
28d645c00242: Download complete
8b438fc1cd11: Verifying Checksum
8b438fc1cd11: Download complete
921df71b230f: Verifying Checksum
921df71b230f: Download complete
37e00e2d9431: Verifying Checksum
37e00e2d9431: Download complete
d3f883494790: Verifying Checksum
d3f883494790: Download complete
c457853b6d82: Verifying Checksum
c457853b6d82: Download complete
dfb81f221332: Pull complete
69d04f35a207: Pull complete
5c3947958a83: Pull complete
b9be2ce5276b: Pull complete
8b438fc1cd11: Pull complete
28d645c00242: Pull complete
921df71b230f: Pull complete
c457853b6d82: Pull complete
37e00e2d9431: Pull complete
d3f883494790: Pull complete
Digest: sha256:de5354acec6e1b13185500d521e5a9e27b7ac4e65c267bb3a5c82deb7c8475f5
Status: Downloaded newer image for ghcr.io/xvnpw/ai-security-analyzer:latest
2025-02-14 15:34:51,362 - __main__ - INFO - Starting AI Security Analyzer
2025-02-14 15:34:51,423 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 1
2025-02-14 15:35:58,825 - ai_security_analyzer.graphs - INFO - Actual token usage: 9497
2025-02-14 15:35:58,828 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739547361.088609       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-14 15:36:05,308 - __main__ - INFO - Starting AI Security Analyzer
2025-02-14 15:36:05,366 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-14 15:36:05,531 - langchain_google_genai.chat_models - WARNING - Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 Resource has been exhausted (e.g. check quota)..
2025-02-14 15:36:26,175 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-14 15:36:46,941 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-14 15:37:05,078 - ai_security_analyzer.graphs - ERROR - Graph execution failed: Invalid json output: ```json
{
  "threats": [
    {
      "title": "Denial of Service (DoS) via Deeply Nested Generic Types",
      "text": "*   **Threat:** Denial of Service (DoS) via Deeply Nested Generic Types\n\n    *   **Description:** An attacker provides a type string with excessively nested generic types, such as `array<array<array<array<...>>>>`.  The attacker aims to cause excessive recursion or memory allocation within the `TypeResolver` library, leading to a crash or unresponsiveness of the application. The attacker does not need to know the internal structure of the application, only that it uses `TypeResolver` and accepts type strings as input (directly or indirectly).\n\n    *   **Impact:** Application unavailability. The server becomes unresponsive, potentially affecting all users.\n\n    *   **Affected Component:**\n        *   `TypeResolver::resolve()` (main entry point)\n        *   `FqsenResolver::resolve()` (handles FQSENs, often involved in generics)\n        *    `TypeResolver::addfqsen()`\n        *   Internal recursive parsing logic within these and related functions.\n\n    *   **Risk Severity:** High\n\n    *   **Mitigation Strategies:**\n        *   **Input Validation:** Implement strict input validation *before* passing any string to `TypeResolver`. Limit the maximum depth of nested generic types (e.g., to a depth of 3 or 5).  Reject overly long type strings.\n        *   **Resource Limits:** Configure PHP with reasonable memory limits (`memory_limit`) and execution time limits (`max_execution_time`).\n        *   **Circuit Breaker:** Implement a circuit breaker pattern to temporarily disable type resolution if it consistently causes errors or exceeds resource thresholds.\n        *   **Whitelisting (if feasible):** If the application only needs to handle a limited set of known types, use a whitelist to allow only those types and reject everything else."
    },
    {
      "title": "Denial of Service (DoS) via Malformed Type Strings",
      "text": "*   **Threat:** Denial of Service (DoS) via Malformed Type Strings\n\n    *   **Description:** An attacker provides a syntactically incorrect type string, such as `array<string`.  The attacker aims to trigger unexpected errors or exceptions within `TypeResolver` that are not properly handled, leading to a crash or unresponsiveness.  This could exploit edge cases in the parsing logic.\n\n    *   **Impact:** Application unavailability.\n\n    *   **Affected Component:**\n        *   `TypeResolver::resolve()`\n        *   Lexer/Parser components within `TypeResolver` (responsible for analyzing the syntax of the type string).\n        *   Error handling logic within `TypeResolver`.\n\n    *   **Risk Severity:** High\n\n    *   **Mitigation Strategies:**\n        *   **Input Validation:**  Use a regular expression or a simple parser to check for basic syntactic correctness *before* passing the string to `TypeResolver`.  This can catch many common malformations.\n        *   **Robust Error Handling:** Ensure that the application gracefully handles any exceptions thrown by `TypeResolver`.  Do not allow uncaught exceptions to crash the application.\n        *   **Resource Limits:**  As with the previous threat, set appropriate memory and execution time limits.\n        *   **Fuzz Testing:** Use fuzz testing techniques to feed `TypeResolver` with a wide variety of malformed inputs and identify potential vulnerabilities."
    },
    {
      "title": "Denial of Service (DoS) via Large Number of Union/Intersection Types",
      "text": "*   **Threat:** Denial of Service (DoS) via Large Number of Union/Intersection Types\n\n    *   **Description:** An attacker provides a type string with a very large number of union (`|`) or intersection (`&`) types, such as `string|int|float|...` (repeated hundreds or thousands of times). The attacker aims to cause excessive processing time and memory consumption within `TypeResolver` as it attempts to resolve and simplify the complex type.\n\n    *   **Impact:** Application unavailability or significant performance degradation.\n\n    *   **Affected Component:**\n        *   `TypeResolver::resolve()`\n        *   Logic related to handling union and intersection types within `TypeResolver`.\n        *   `phpDocumentor\Reflection\Types\Compound`\n\n    *   **Risk Severity:** High\n\n    *   **Mitigation Strategies:**\n        *   **Input Validation:** Limit the maximum number of union/intersection types allowed in a single type string (e.g., to 10 or 20).\n        *   **Resource Limits:**  As with other DoS threats, set appropriate memory and execution time limits.\n        *   **Caching (if applicable):** If the same type strings are resolved repeatedly, consider caching the results to avoid redundant processing. *However*, be very careful with caching to avoid introducing new vulnerabilities (e.g., cache poisoning)."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-02-14 15:37:05,080 - __main__ - ERROR - Application error: Invalid json output: ```json
{
  "threats": [
    {
      "title": "Denial of Service (DoS) via Deeply Nested Generic Types",
      "text": "*   **Threat:** Denial of Service (DoS) via Deeply Nested Generic Types\n\n    *   **Description:** An attacker provides a type string with excessively nested generic types, such as `array<array<array<array<...>>>>`.  The attacker aims to cause excessive recursion or memory allocation within the `TypeResolver` library, leading to a crash or unresponsiveness of the application. The attacker does not need to know the internal structure of the application, only that it uses `TypeResolver` and accepts type strings as input (directly or indirectly).\n\n    *   **Impact:** Application unavailability. The server becomes unresponsive, potentially affecting all users.\n\n    *   **Affected Component:**\n        *   `TypeResolver::resolve()` (main entry point)\n        *   `FqsenResolver::resolve()` (handles FQSENs, often involved in generics)\n        *    `TypeResolver::addfqsen()`\n        *   Internal recursive parsing logic within these and related functions.\n\n    *   **Risk Severity:** High\n\n    *   **Mitigation Strategies:**\n        *   **Input Validation:** Implement strict input validation *before* passing any string to `TypeResolver`. Limit the maximum depth of nested generic types (e.g., to a depth of 3 or 5).  Reject overly long type strings.\n        *   **Resource Limits:** Configure PHP with reasonable memory limits (`memory_limit`) and execution time limits (`max_execution_time`).\n        *   **Circuit Breaker:** Implement a circuit breaker pattern to temporarily disable type resolution if it consistently causes errors or exceeds resource thresholds.\n        *   **Whitelisting (if feasible):** If the application only needs to handle a limited set of known types, use a whitelist to allow only those types and reject everything else."
    },
    {
      "title": "Denial of Service (DoS) via Malformed Type Strings",
      "text": "*   **Threat:** Denial of Service (DoS) via Malformed Type Strings\n\n    *   **Description:** An attacker provides a syntactically incorrect type string, such as `array<string`.  The attacker aims to trigger unexpected errors or exceptions within `TypeResolver` that are not properly handled, leading to a crash or unresponsiveness.  This could exploit edge cases in the parsing logic.\n\n    *   **Impact:** Application unavailability.\n\n    *   **Affected Component:**\n        *   `TypeResolver::resolve()`\n        *   Lexer/Parser components within `TypeResolver` (responsible for analyzing the syntax of the type string).\n        *   Error handling logic within `TypeResolver`.\n\n    *   **Risk Severity:** High\n\n    *   **Mitigation Strategies:**\n        *   **Input Validation:**  Use a regular expression or a simple parser to check for basic syntactic correctness *before* passing the string to `TypeResolver`.  This can catch many common malformations.\n        *   **Robust Error Handling:** Ensure that the application gracefully handles any exceptions thrown by `TypeResolver`.  Do not allow uncaught exceptions to crash the application.\n        *   **Resource Limits:**  As with the previous threat, set appropriate memory and execution time limits.\n        *   **Fuzz Testing:** Use fuzz testing techniques to feed `TypeResolver` with a wide variety of malformed inputs and identify potential vulnerabilities."
    },
    {
      "title": "Denial of Service (DoS) via Large Number of Union/Intersection Types",
      "text": "*   **Threat:** Denial of Service (DoS) via Large Number of Union/Intersection Types\n\n    *   **Description:** An attacker provides a type string with a very large number of union (`|`) or intersection (`&`) types, such as `string|int|float|...` (repeated hundreds or thousands of times). The attacker aims to cause excessive processing time and memory consumption within `TypeResolver` as it attempts to resolve and simplify the complex type.\n\n    *   **Impact:** Application unavailability or significant performance degradation.\n\n    *   **Affected Component:**\n        *   `TypeResolver::resolve()`\n        *   Logic related to handling union and intersection types within `TypeResolver`.\n        *   `phpDocumentor\Reflection\Types\Compound`\n\n    *   **Risk Severity:** High\n\n    *   **Mitigation Strategies:**\n        *   **Input Validation:** Limit the maximum number of union/intersection types allowed in a single type string (e.g., to 10 or 20).\n        *   **Resource Limits:**  As with other DoS threats, set appropriate memory and execution time limits.\n        *   **Caching (if applicable):** If the same type strings are resolved repeatedly, consider caching the results to avoid redundant processing. *However*, be very careful with caching to avoid introducing new vulnerabilities (e.g., cache poisoning)."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE . You can try to run with --resume to resume from last checkpoint.
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739547427.430903       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-14 15:37:21,734 - __main__ - INFO - Starting AI Security Analyzer
2025-02-14 15:37:21,795 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-14 15:37:46,558 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-14 15:38:08,479 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-14 15:39:45,800 - ai_security_analyzer.graphs - INFO - Actual token usage: 20881
2025-02-14 15:39:45,807 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739547588.048317       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-14 15:39:52,278 - __main__ - INFO - Starting AI Security Analyzer
2025-02-14 15:39:52,335 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-14 15:40:14,603 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-14 15:40:33,251 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-14 15:41:14,796 - ai_security_analyzer.graphs - INFO - Actual token usage: 13576
2025-02-14 15:41:14,800 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739547677.044385       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-14 15:41:21,289 - __main__ - INFO - Starting AI Security Analyzer
2025-02-14 15:41:21,347 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 4
2025-02-14 15:41:46,415 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 4
2025-02-14 15:42:42,195 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 4
2025-02-14 15:42:59,258 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 4 of 4
2025-02-14 15:46:11,951 - ai_security_analyzer.graphs - INFO - Actual token usage: 54542
2025-02-14 15:46:11,994 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739547974.229354       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-14 15:46:18,474 - __main__ - INFO - Starting AI Security Analyzer
2025-02-14 15:46:18,531 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-14 15:46:39,993 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-14 15:47:14,714 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-14 15:48:14,360 - langchain_google_genai.chat_models - WARNING - Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 Resource has been exhausted (e.g. check quota)..
2025-02-14 15:50:08,072 - ai_security_analyzer.graphs - INFO - Actual token usage: 32338
2025-02-14 15:50:08,082 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739548210.348888       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
