Unable to find image 'ghcr.io/xvnpw/ai-security-analyzer:latest' locally
latest: Pulling from xvnpw/ai-security-analyzer
1f3e46996e29: Pulling fs layer
dfb81f221332: Pulling fs layer
69d04f35a207: Pulling fs layer
5c3947958a83: Pulling fs layer
b9be2ce5276b: Pulling fs layer
8b438fc1cd11: Pulling fs layer
28d645c00242: Pulling fs layer
921df71b230f: Pulling fs layer
c457853b6d82: Pulling fs layer
37e00e2d9431: Pulling fs layer
d3f883494790: Pulling fs layer
5c3947958a83: Waiting
b9be2ce5276b: Waiting
8b438fc1cd11: Waiting
37e00e2d9431: Waiting
28d645c00242: Waiting
d3f883494790: Waiting
921df71b230f: Waiting
c457853b6d82: Waiting
1f3e46996e29: Verifying Checksum
1f3e46996e29: Download complete
dfb81f221332: Verifying Checksum
dfb81f221332: Download complete
69d04f35a207: Verifying Checksum
69d04f35a207: Download complete
5c3947958a83: Verifying Checksum
5c3947958a83: Download complete
1f3e46996e29: Pull complete
b9be2ce5276b: Verifying Checksum
b9be2ce5276b: Download complete
28d645c00242: Verifying Checksum
28d645c00242: Download complete
8b438fc1cd11: Verifying Checksum
8b438fc1cd11: Download complete
921df71b230f: Verifying Checksum
921df71b230f: Download complete
37e00e2d9431: Verifying Checksum
37e00e2d9431: Download complete
d3f883494790: Verifying Checksum
d3f883494790: Download complete
dfb81f221332: Pull complete
c457853b6d82: Verifying Checksum
c457853b6d82: Download complete
69d04f35a207: Pull complete
5c3947958a83: Pull complete
b9be2ce5276b: Pull complete
8b438fc1cd11: Pull complete
28d645c00242: Pull complete
921df71b230f: Pull complete
c457853b6d82: Pull complete
37e00e2d9431: Pull complete
d3f883494790: Pull complete
Digest: sha256:de5354acec6e1b13185500d521e5a9e27b7ac4e65c267bb3a5c82deb7c8475f5
Status: Downloaded newer image for ghcr.io/xvnpw/ai-security-analyzer:latest
2025-02-13 16:33:36,752 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 16:33:36,815 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 1
2025-02-13 16:35:12,377 - ai_security_analyzer.graphs - INFO - Actual token usage: 14441
2025-02-13 16:35:12,381 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739464514.690811       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 16:35:18,981 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 16:35:19,039 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-13 16:35:40,274 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-13 16:35:40,317 - langchain_google_genai.chat_models - WARNING - Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 Resource has been exhausted (e.g. check quota)..
2025-02-13 16:36:03,359 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-13 16:37:37,735 - ai_security_analyzer.graphs - INFO - Actual token usage: 19828
2025-02-13 16:37:37,743 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739464660.017293       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 16:37:44,360 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 16:37:44,419 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-13 16:38:05,048 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-13 16:38:23,647 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-13 16:40:51,683 - ai_security_analyzer.graphs - INFO - Actual token usage: 23491
2025-02-13 16:40:51,689 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739464854.000630       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 16:40:58,347 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 16:40:58,408 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 4
2025-02-13 16:41:26,114 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 4
2025-02-13 16:41:40,473 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 4
2025-02-13 16:41:55,564 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 4 of 4
2025-02-13 16:44:40,740 - ai_security_analyzer.graphs - INFO - Actual token usage: 32766
2025-02-13 16:44:40,752 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739465083.032400       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 16:44:47,334 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 16:44:47,392 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-13 16:45:09,342 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-13 16:45:46,608 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-13 16:46:27,435 - ai_security_analyzer.graphs - ERROR - Graph execution failed: Invalid json output: ```json
{
  "mitigation_strategies": [
    {
      "title": "Custom Formatters for Data Sanitization",
      "text": "**1. Mitigation Strategy: Custom Formatters for Data Sanitization**\n\n*   **Description:**\n    1.  **Identify Sensitive Data:** Determine all types of sensitive data that *might* be passed to logging statements (even indirectly).\n    2.  **Create `DDLogFormatter` Subclasses:** For *each* sensitive data type, create a custom `DDLogFormatter` subclass.\n    3.  **Implement `formatLogMessage:`:** Within the `formatLogMessage:` method of each formatter:\n        *   Use regular expressions, string manipulation, or a dedicated sanitization library to detect the sensitive data within the `logMessage->_message`.\n        *   Redact, mask, hash, or otherwise transform the sensitive data *before* it's written to the log.  *Never* store the raw sensitive data.\n        ```objectivec\n        // Example (simplified) API Key Formatter\n        @interface APIKeyFormatter : NSObject <DDLogFormatter>\n        @end\n\n        @implementation APIKeyFormatter\n        - (NSString *)formatLogMessage:(DDLogMessage *)logMessage {\n            NSString *message = logMessage->_message;\n            NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"\\b[a-zA-Z0-9]{32,}\\b\" options:0 error:nil]; // Example API Key regex\n            NSString *redactedMessage = [regex stringByReplacingMatchesInString:message options:0 range:NSMakeRange(0, [message length]) withTemplate:@"[REDACTED API KEY]"];\n            return redactedMessage;\n        }\n        @end\n        ```\n    4.  **Register Formatters:** Associate each custom formatter with the appropriate loggers (e.g., `fileLogger`, `consoleLogger`).\n        ```objectivec\n        APIKeyFormatter *apiKeyFormatter = [[APIKeyFormatter alloc] init];\n        [DDLog addLogger:[DDOSLogger sharedInstance] withLevel:DDLogLevelAll]; // Or a specific level\n        [[DDOSLogger sharedInstance] setLogFormatter:apiKeyFormatter];\n\n        DDFileLogger *fileLogger = [[DDFileLogger alloc] init];\n        [fileLogger setLogFormatter:apiKeyFormatter];\n        [DDLog addLogger:fileLogger withLevel:DDLogLevelAll];\n        ```\n    5.  **Test Thoroughly:** Create unit tests that specifically attempt to log sensitive data and verify that the formatters correctly redact/mask it.\n\n*   **List of Threats Mitigated:**\n    *   **Threat:** Sensitive Data Exposure (PII, Credentials, Financial Data, PHI, Internal Details, Business Logic).\n        *   **Severity:** Critical.\n    *   **Threat:** Regulatory Non-Compliance.\n        *   **Severity:** Critical.\n\n*   **Impact:**\n    *   **Sensitive Data Exposure:** Risk significantly reduced (Critical to Low/Medium).\n    *   **Regulatory Non-Compliance:** Risk significantly reduced (Critical to Low/Medium).\n\n*   **Currently Implemented:**\n    *   `Loggers/Formatters/CreditCardFormatter.m` (Exists).\n    *   `Loggers/Formatters/PIIFormatter.m` (Partially implemented).\n\n*   **Missing Implementation:**\n    *   Complete `PIIFormatter.m`.\n    *   Formatters for API keys, internal IPs, and other sensitive data types identified in the logging policy.\n    *   Comprehensive unit tests for all formatters."
    },
    {
      "title": "Strict Log Level Management",
      "text": "**2. Mitigation Strategy: Strict Log Level Management**\n\n*   **Description:**\n    1.  **Define Production Level:**  Set the `ddLogLevel` variable appropriately for production builds, typically to `DDLogLevelError` or `DDLogLevelWarning`. Use preprocessor macros or configuration files to differentiate between development and production.\n        ```objectivec\n        #ifdef DEBUG\n            DDLogLevel ddLogLevel = DDLogLevelVerbose; // Or DDLogLevelDebug\n        #else\n            DDLogLevel ddLogLevel = DDLogLevelError;\n        #endif\n        ```\n    2.  **Apply to Loggers:** Ensure that *all* loggers used in the application respect the `ddLogLevel` setting.\n        ```objectivec\n        [DDLog addLogger:[DDOSLogger sharedInstance] withLevel:ddLogLevel];\n        [DDLog addLogger:fileLogger withLevel:ddLogLevel];\n        // ... add other loggers with the correct level\n        ```\n    3.  **Avoid Verbose Levels in Production:**  *Never* use `DDLogLevelVerbose` or `DDLogLevelDebug` in production code unless absolutely necessary (and then only temporarily and securely, as described in previous responses).\n    4. **Review Existing Log Statements:** Audit all existing `DDLog...` calls in the codebase to ensure they are using appropriate log levels.  Adjust levels as needed.\n\n*   **List of Threats Mitigated:**\n    *   **Threat:** Sensitive Data Exposure (in verbose logs).\n        *   **Severity:** High.\n    *   **Threat:** Performance Degradation (due to excessive logging).\n        *   **Severity:** Medium.\n\n*   **Impact:**\n    *   **Sensitive Data Exposure:** Risk significantly reduced (High to Low).\n    *   **Performance Degradation:** Risk reduced (Medium to Low).\n\n*   **Currently Implemented:**\n    *   `ddLogLevel` set to `DDLogLevelError` in `AppDelegate.m` for non-debug builds.\n\n*   **Missing Implementation:**\n    *   Comprehensive review of all `DDLog...` calls to ensure correct log level usage."
    },
    {
      "title": "`DDFileLogger` Configuration for Rotation and Limits",
      "text": "**3. Mitigation Strategy: `DDFileLogger` Configuration for Rotation and Limits**\n\n*   **Description:**\n    1.  **Instantiate `DDFileLogger`:** If using file logging (which is common), use `DDFileLogger` to manage log files.\n    2.  **Configure `maximumFileSize`:** Set a reasonable maximum file size (e.g., 10MB, 50MB) to prevent individual log files from growing too large.\n        ```objectivec\n        DDFileLogger *fileLogger = [[DDFileLogger alloc] init];\n        fileLogger.maximumFileSize = 1024 * 1024 * 10; // 10 MB\n        ```\n    3.  **Configure `rollingFrequency`:** Set a rolling frequency to rotate logs based on time (e.g., daily, weekly).\n        ```objectivec\n        fileLogger.rollingFrequency = 60 * 60 * 24; // 24 hours (daily)\n        ```\n    4.  **Configure `maximumNumberOfLogFiles`:** Limit the number of archived log files to prevent disk space exhaustion.\n        ```objectivec\n        fileLogger.maximumNumberOfLogFiles = 7; // Keep 7 days of logs\n        ```\n    5. **Consider a Custom `logFileManager`:** For advanced control over log file management (e.g., custom archiving, secure deletion), create a subclass of `DDLogFileManagerDefault` and override relevant methods. This is *not* strictly necessary for basic rotation, but it provides more flexibility.\n    6. **Add the Logger:**\n       ```objectivec\n        [DDLog addLogger:fileLogger withLevel:ddLogLevel];\n       ```\n\n*   **List of Threats Mitigated:**\n    *   **Threat:** Disk Space Exhaustion (due to uncontrolled log file growth).\n        *   **Severity:** Medium.\n\n*   **Impact:**\n    *   **Disk Space Exhaustion:** Risk significantly reduced (Medium to Low).\n\n*   **Currently Implemented:**\n    *   Basic `DDFileLogger` configuration with `maximumFileSize`.\n\n*   **Missing Implementation:**\n    *   Configuration of `rollingFrequency` and `maximumNumberOfLogFiles`.\n    *   Consideration of a custom `DDLogFileManager` for more advanced control."
    },
    {
      "title": "Parameterized Logging (Enforcement)",
      "text": "**4. Mitigation Strategy: Parameterized Logging (Enforcement)**\n\n*   **Description:**\n    1.  **Code Review Policy:** Enforce a strict code review policy that *requires* the use of CocoaLumberjack's parameterized logging macros (`DDLogInfo`, `DDLogDebug`, etc.) whenever dynamic data is included in a log message.\n    2.  **Prohibit String Concatenation:** Explicitly prohibit the use of `stringWithFormat:` or other string concatenation methods to build log messages that include user-supplied or potentially untrusted data.\n        ```objectivec\n        // GOOD: Parameterized\n        DDLogWarn(@\"User %@ failed authentication\", username);\n\n        // BAD: String concatenation - VULNERABLE\n        DDLogWarn([NSString stringWithFormat:@\"User %@ failed authentication\", username]);\n        ```\n    3. **Static Analysis (Optional):** Explore the use of static analysis tools that can detect potential log injection vulnerabilities (although this might be challenging to achieve reliably). The key is to flag any use of string formatting functions where the format string itself is not a constant.\n\n*   **List of Threats Mitigated:**\n    *   **Threat:** Log Injection.\n        *   **Severity:** High.\n\n*   **Impact:**\n    *   **Log Injection:** Risk significantly reduced (High to Low).\n\n*   **Currently Implemented:**\n    *   Parameterized logging is generally used, but not consistently enforced.\n\n*   **Missing Implementation:**\n    *   Strict enforcement through code reviews.\n    *   (Optional) Exploration of static analysis tools."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-02-13 16:46:27,437 - __main__ - ERROR - Application error: Invalid json output: ```json
{
  "mitigation_strategies": [
    {
      "title": "Custom Formatters for Data Sanitization",
      "text": "**1. Mitigation Strategy: Custom Formatters for Data Sanitization**\n\n*   **Description:**\n    1.  **Identify Sensitive Data:** Determine all types of sensitive data that *might* be passed to logging statements (even indirectly).\n    2.  **Create `DDLogFormatter` Subclasses:** For *each* sensitive data type, create a custom `DDLogFormatter` subclass.\n    3.  **Implement `formatLogMessage:`:** Within the `formatLogMessage:` method of each formatter:\n        *   Use regular expressions, string manipulation, or a dedicated sanitization library to detect the sensitive data within the `logMessage->_message`.\n        *   Redact, mask, hash, or otherwise transform the sensitive data *before* it's written to the log.  *Never* store the raw sensitive data.\n        ```objectivec\n        // Example (simplified) API Key Formatter\n        @interface APIKeyFormatter : NSObject <DDLogFormatter>\n        @end\n\n        @implementation APIKeyFormatter\n        - (NSString *)formatLogMessage:(DDLogMessage *)logMessage {\n            NSString *message = logMessage->_message;\n            NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"\\b[a-zA-Z0-9]{32,}\\b\" options:0 error:nil]; // Example API Key regex\n            NSString *redactedMessage = [regex stringByReplacingMatchesInString:message options:0 range:NSMakeRange(0, [message length]) withTemplate:@"[REDACTED API KEY]"];\n            return redactedMessage;\n        }\n        @end\n        ```\n    4.  **Register Formatters:** Associate each custom formatter with the appropriate loggers (e.g., `fileLogger`, `consoleLogger`).\n        ```objectivec\n        APIKeyFormatter *apiKeyFormatter = [[APIKeyFormatter alloc] init];\n        [DDLog addLogger:[DDOSLogger sharedInstance] withLevel:DDLogLevelAll]; // Or a specific level\n        [[DDOSLogger sharedInstance] setLogFormatter:apiKeyFormatter];\n\n        DDFileLogger *fileLogger = [[DDFileLogger alloc] init];\n        [fileLogger setLogFormatter:apiKeyFormatter];\n        [DDLog addLogger:fileLogger withLevel:DDLogLevelAll];\n        ```\n    5.  **Test Thoroughly:** Create unit tests that specifically attempt to log sensitive data and verify that the formatters correctly redact/mask it.\n\n*   **List of Threats Mitigated:**\n    *   **Threat:** Sensitive Data Exposure (PII, Credentials, Financial Data, PHI, Internal Details, Business Logic).\n        *   **Severity:** Critical.\n    *   **Threat:** Regulatory Non-Compliance.\n        *   **Severity:** Critical.\n\n*   **Impact:**\n    *   **Sensitive Data Exposure:** Risk significantly reduced (Critical to Low/Medium).\n    *   **Regulatory Non-Compliance:** Risk significantly reduced (Critical to Low/Medium).\n\n*   **Currently Implemented:**\n    *   `Loggers/Formatters/CreditCardFormatter.m` (Exists).\n    *   `Loggers/Formatters/PIIFormatter.m` (Partially implemented).\n\n*   **Missing Implementation:**\n    *   Complete `PIIFormatter.m`.\n    *   Formatters for API keys, internal IPs, and other sensitive data types identified in the logging policy.\n    *   Comprehensive unit tests for all formatters."
    },
    {
      "title": "Strict Log Level Management",
      "text": "**2. Mitigation Strategy: Strict Log Level Management**\n\n*   **Description:**\n    1.  **Define Production Level:**  Set the `ddLogLevel` variable appropriately for production builds, typically to `DDLogLevelError` or `DDLogLevelWarning`. Use preprocessor macros or configuration files to differentiate between development and production.\n        ```objectivec\n        #ifdef DEBUG\n            DDLogLevel ddLogLevel = DDLogLevelVerbose; // Or DDLogLevelDebug\n        #else\n            DDLogLevel ddLogLevel = DDLogLevelError;\n        #endif\n        ```\n    2.  **Apply to Loggers:** Ensure that *all* loggers used in the application respect the `ddLogLevel` setting.\n        ```objectivec\n        [DDLog addLogger:[DDOSLogger sharedInstance] withLevel:ddLogLevel];\n        [DDLog addLogger:fileLogger withLevel:ddLogLevel];\n        // ... add other loggers with the correct level\n        ```\n    3.  **Avoid Verbose Levels in Production:**  *Never* use `DDLogLevelVerbose` or `DDLogLevelDebug` in production code unless absolutely necessary (and then only temporarily and securely, as described in previous responses).\n    4. **Review Existing Log Statements:** Audit all existing `DDLog...` calls in the codebase to ensure they are using appropriate log levels.  Adjust levels as needed.\n\n*   **List of Threats Mitigated:**\n    *   **Threat:** Sensitive Data Exposure (in verbose logs).\n        *   **Severity:** High.\n    *   **Threat:** Performance Degradation (due to excessive logging).\n        *   **Severity:** Medium.\n\n*   **Impact:**\n    *   **Sensitive Data Exposure:** Risk significantly reduced (High to Low).\n    *   **Performance Degradation:** Risk reduced (Medium to Low).\n\n*   **Currently Implemented:**\n    *   `ddLogLevel` set to `DDLogLevelError` in `AppDelegate.m` for non-debug builds.\n\n*   **Missing Implementation:**\n    *   Comprehensive review of all `DDLog...` calls to ensure correct log level usage."
    },
    {
      "title": "`DDFileLogger` Configuration for Rotation and Limits",
      "text": "**3. Mitigation Strategy: `DDFileLogger` Configuration for Rotation and Limits**\n\n*   **Description:**\n    1.  **Instantiate `DDFileLogger`:** If using file logging (which is common), use `DDFileLogger` to manage log files.\n    2.  **Configure `maximumFileSize`:** Set a reasonable maximum file size (e.g., 10MB, 50MB) to prevent individual log files from growing too large.\n        ```objectivec\n        DDFileLogger *fileLogger = [[DDFileLogger alloc] init];\n        fileLogger.maximumFileSize = 1024 * 1024 * 10; // 10 MB\n        ```\n    3.  **Configure `rollingFrequency`:** Set a rolling frequency to rotate logs based on time (e.g., daily, weekly).\n        ```objectivec\n        fileLogger.rollingFrequency = 60 * 60 * 24; // 24 hours (daily)\n        ```\n    4.  **Configure `maximumNumberOfLogFiles`:** Limit the number of archived log files to prevent disk space exhaustion.\n        ```objectivec\n        fileLogger.maximumNumberOfLogFiles = 7; // Keep 7 days of logs\n        ```\n    5. **Consider a Custom `logFileManager`:** For advanced control over log file management (e.g., custom archiving, secure deletion), create a subclass of `DDLogFileManagerDefault` and override relevant methods. This is *not* strictly necessary for basic rotation, but it provides more flexibility.\n    6. **Add the Logger:**\n       ```objectivec\n        [DDLog addLogger:fileLogger withLevel:ddLogLevel];\n       ```\n\n*   **List of Threats Mitigated:**\n    *   **Threat:** Disk Space Exhaustion (due to uncontrolled log file growth).\n        *   **Severity:** Medium.\n\n*   **Impact:**\n    *   **Disk Space Exhaustion:** Risk significantly reduced (Medium to Low).\n\n*   **Currently Implemented:**\n    *   Basic `DDFileLogger` configuration with `maximumFileSize`.\n\n*   **Missing Implementation:**\n    *   Configuration of `rollingFrequency` and `maximumNumberOfLogFiles`.\n    *   Consideration of a custom `DDLogFileManager` for more advanced control."
    },
    {
      "title": "Parameterized Logging (Enforcement)",
      "text": "**4. Mitigation Strategy: Parameterized Logging (Enforcement)**\n\n*   **Description:**\n    1.  **Code Review Policy:** Enforce a strict code review policy that *requires* the use of CocoaLumberjack's parameterized logging macros (`DDLogInfo`, `DDLogDebug`, etc.) whenever dynamic data is included in a log message.\n    2.  **Prohibit String Concatenation:** Explicitly prohibit the use of `stringWithFormat:` or other string concatenation methods to build log messages that include user-supplied or potentially untrusted data.\n        ```objectivec\n        // GOOD: Parameterized\n        DDLogWarn(@\"User %@ failed authentication\", username);\n\n        // BAD: String concatenation - VULNERABLE\n        DDLogWarn([NSString stringWithFormat:@\"User %@ failed authentication\", username]);\n        ```\n    3. **Static Analysis (Optional):** Explore the use of static analysis tools that can detect potential log injection vulnerabilities (although this might be challenging to achieve reliably). The key is to flag any use of string formatting functions where the format string itself is not a constant.\n\n*   **List of Threats Mitigated:**\n    *   **Threat:** Log Injection.\n        *   **Severity:** High.\n\n*   **Impact:**\n    *   **Log Injection:** Risk significantly reduced (High to Low).\n\n*   **Currently Implemented:**\n    *   Parameterized logging is generally used, but not consistently enforced.\n\n*   **Missing Implementation:**\n    *   Strict enforcement through code reviews.\n    *   (Optional) Exploration of static analysis tools."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE . You can try to run with --resume to resume from last checkpoint.
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739465189.727029       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 16:46:44,022 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 16:46:44,085 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-13 16:47:02,651 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-13 16:47:33,583 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-13 16:50:52,037 - ai_security_analyzer.graphs - INFO - Actual token usage: 32284
2025-02-13 16:50:52,047 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739465454.382080       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
