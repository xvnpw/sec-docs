Unable to find image 'ghcr.io/xvnpw/ai-security-analyzer:latest' locally
latest: Pulling from xvnpw/ai-security-analyzer
1f3e46996e29: Pulling fs layer
dfb81f221332: Pulling fs layer
69d04f35a207: Pulling fs layer
5c3947958a83: Pulling fs layer
b9be2ce5276b: Pulling fs layer
8b438fc1cd11: Pulling fs layer
28d645c00242: Pulling fs layer
b9be2ce5276b: Waiting
5c3947958a83: Waiting
8b438fc1cd11: Waiting
921df71b230f: Pulling fs layer
c457853b6d82: Pulling fs layer
37e00e2d9431: Pulling fs layer
d3f883494790: Pulling fs layer
c457853b6d82: Waiting
37e00e2d9431: Waiting
28d645c00242: Waiting
d3f883494790: Waiting
921df71b230f: Waiting
1f3e46996e29: Download complete
69d04f35a207: Verifying Checksum
69d04f35a207: Download complete
1f3e46996e29: Pull complete
5c3947958a83: Verifying Checksum
5c3947958a83: Download complete
b9be2ce5276b: Verifying Checksum
b9be2ce5276b: Download complete
dfb81f221332: Verifying Checksum
dfb81f221332: Download complete
28d645c00242: Verifying Checksum
28d645c00242: Download complete
8b438fc1cd11: Verifying Checksum
8b438fc1cd11: Download complete
37e00e2d9431: Verifying Checksum
37e00e2d9431: Download complete
921df71b230f: Verifying Checksum
921df71b230f: Download complete
d3f883494790: Verifying Checksum
d3f883494790: Download complete
dfb81f221332: Pull complete
c457853b6d82: Verifying Checksum
c457853b6d82: Download complete
69d04f35a207: Pull complete
5c3947958a83: Pull complete
b9be2ce5276b: Pull complete
8b438fc1cd11: Pull complete
28d645c00242: Pull complete
921df71b230f: Pull complete
c457853b6d82: Pull complete
37e00e2d9431: Pull complete
d3f883494790: Pull complete
Digest: sha256:de5354acec6e1b13185500d521e5a9e27b7ac4e65c267bb3a5c82deb7c8475f5
Status: Downloaded newer image for ghcr.io/xvnpw/ai-security-analyzer:latest
2025-02-13 16:53:57,755 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 16:53:57,818 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 1
2025-02-13 16:55:03,327 - ai_security_analyzer.graphs - INFO - Actual token usage: 9445
2025-02-13 16:55:03,331 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739465705.624472       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 16:55:09,912 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 16:55:09,970 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-13 16:55:30,002 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-13 16:55:54,623 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-13 16:57:14,417 - ai_security_analyzer.graphs - INFO - Actual token usage: 18537
2025-02-13 16:57:14,424 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739465836.726355       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 16:57:21,073 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 16:57:21,132 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-13 16:57:45,166 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-13 16:58:00,284 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-13 16:59:39,600 - langchain_google_genai.chat_models - WARNING - Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 Resource has been exhausted (e.g. check quota)..
2025-02-13 17:00:13,651 - ai_security_analyzer.graphs - INFO - Actual token usage: 21926
2025-02-13 17:00:13,657 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739466015.933793       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 17:00:20,196 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 17:00:20,255 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 4
2025-02-13 17:00:44,832 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 4
2025-02-13 17:01:03,958 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 4
2025-02-13 17:01:17,252 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 4 of 4
2025-02-13 17:04:05,408 - ai_security_analyzer.graphs - INFO - Actual token usage: 33989
2025-02-13 17:04:05,418 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739466247.718846       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 17:04:11,972 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 17:04:12,032 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-13 17:04:37,266 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-13 17:05:20,473 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-13 17:05:53,222 - ai_security_analyzer.graphs - ERROR - Graph execution failed: Invalid json output: ```json
{
  "mitigation_strategies": [
    {
      "title": "Strict Property Type Enforcement and Validation (MJExtension-Specific)",
      "text": "*   **Description:**\n    1.  **Precise Property Types:** Define Objective-C model properties with the most specific types possible (e.g., `NSString *`, `NSNumber *`, `NSArray<SpecificType *> *`). Avoid `id` or `NSObject` when a more concrete type is known.\n    2.  **Override `mj_newValueFromOldValue:`:** Implement this method in *each* model class that uses `MJExtension`. This is the core of this mitigation.\n    3.  **Type Checking (Inside `mj_newValueFromOldValue:`):** Use `[oldValue isKindOfClass:[ExpectedClass class]]` to verify that the incoming JSON value (`oldValue`) matches the expected type for the property.\n    4.  **Handle Type Mismatches (Inside `mj_newValueFromOldValue:`):**\n        *   If incorrect type: Return `nil` (and log), attempt a *safe* conversion (if and only if provably safe), or throw an `NSException`.\n        *   If correct type: Proceed to further validation.\n    5.  **Additional Validation (Inside `mj_newValueFromOldValue:`):** Perform property-specific validation:\n        *   `NSString`: Length checks, allowed character checks, format validation (regex).\n        *   `NSNumber`: Range checks (min/max).\n        *   `NSArray`: Element count checks.\n    6.  **Override `mj_objectClassInArray:`:** For `NSArray` properties containing custom objects, implement this method. Return a dictionary mapping the array property name to the *Class* of objects expected within the array (e.g., `@{@"posts": [Post class]}`).\n    7.  **Override `mj_replacedKeyFromPropertyName` (Optional but Recommended):** If JSON keys don't directly match property names, implement this method. Return a dictionary mapping JSON keys to property names. This improves clarity and reduces the risk of `MJExtension` making incorrect assumptions.\n\n*   **Threats Mitigated:**\n    *   **Type Confusion:** (Severity: High) - Prevents injection of unexpected data types.\n    *   **Data Validation Bypass:** (Severity: Medium) - Enforces data constraints at deserialization.\n    *   **Unexpected Behavior:** (Severity: Low) - Improves robustness against malformed input.\n\n*   **Impact:**\n    *   **Type Confusion:** Risk significantly reduced.\n    *   **Data Validation Bypass:** Risk significantly reduced.\n    *   **Unexpected Behavior:** Risk reduced.\n\n*   **Currently Implemented:**\n    *   `mj_newValueFromOldValue:` implemented in `User.m` (partial validation).\n    *   `mj_objectClassInArray` implemented in `Product.m`.\n\n*   **Missing Implementation:**\n    *   `mj_newValueFromOldValue:` *not* implemented in `Product.m`.\n    *   Incomplete validation within existing `mj_newValueFromOldValue:` implementations (missing range checks, regex).\n    *   `mj_replacedKeyFromPropertyName` not used."
    },
    {
      "title": "Preventing Class Instantiation Attacks (MJExtension-Specific)",
      "text": "*   **Description:**\n    1.  **Identify Dynamic Instantiation Points:** Find all uses of `MJExtension` that might dynamically create classes based on JSON (primarily `mj_objectClassInArray`).\n    2.  **Prefer Explicit Instantiation:** Refactor to *explicitly* create objects *before* using `MJExtension` to populate them.  This is the preferred approach.  Example:\n        ```objectivec\n        MyObject *obj = [[MyObject alloc] init];\n        [obj mj_setKeyValues:jsonDictionary]; // Populate, don't create.\n        ```\n    3.  **Whitelist (If Dynamic Instantiation is Unavoidable):** Create an `NSArray` or `NSSet` of allowed `Class` objects (e.g., `@[[User class], [Product class]]`).\n    4.  **Validate in `mj_objectClassInArray`:** Within your `mj_objectClassInArray` implementation, extract the class name from the JSON and check it against your whitelist *before* returning the `Class`.\n        ```objectivec\n        - (NSDictionary *)mj_objectClassInArray {\n            return @{\n                \"items\": [self validatedClassForPropertyName:@\"items\" fromJSON:/* JSON data */]\n            };\n        }\n\n        - (Class)validatedClassForPropertyName:(NSString *)propertyName fromJSON:(NSDictionary *)json {\n            NSString *className = ...; // Extract class name from JSON.\n            Class requestedClass = NSClassFromString(className);\n            NSArray *allowedClasses = @[[AllowedClass1 class], [AllowedClass2 class]];\n\n            if ([allowedClasses containsObject:requestedClass]) {\n                return requestedClass;\n            } else {\n                NSLog(@\"Disallowed class: %@\", className);\n                return nil; // Or throw exception.\n            }\n        }\n        ```\n    5.  **Reject Invalid Classes:** If the class name is not in the whitelist, return `nil` from `mj_objectClassInArray`, log an error, or throw an exception.\n\n*   **Threats Mitigated:**\n    *   **Arbitrary Class Instantiation:** (Severity: Critical) - Prevents instantiation of attacker-controlled classes.\n    *   **Denial of Service (DoS):** (Severity: Medium) - Prevents instantiation of resource-intensive classes.\n\n*   **Impact:**\n    *   **Arbitrary Class Instantiation:** Risk eliminated (explicit instantiation) or significantly reduced (whitelist).\n    *   **Denial of Service (DoS):** Risk reduced.\n\n*   **Currently Implemented:**\n    *   Explicit instantiation used for `User` class.\n\n*   **Missing Implementation:**\n    *   `Product` class instantiated dynamically *without* a whitelist.  This is a major vulnerability."
    },
    {
      "title": "Safe Handling of `mj_keyValuesArrayWithObjectArray:` (MJExtension-Specific)",
      "text": "*   **Description:**\n    1.  **Identify Sensitive Properties:** Review model classes for properties containing sensitive data.\n    2.  **Implement `mj_ignoredPropertyNames`:** In each model class, implement this method. Return an `NSArray` of property names to *exclude* during object-to-dictionary conversion using `mj_keyValuesArrayWithObjectArray:`.\n        ```objectivec\n        + (NSArray *)mj_ignoredPropertyNames {\n            return @[@\"sensitiveProperty1\", @\"sensitiveProperty2\"];\n        }\n        ```\n    3.  **Review Usage:** Carefully examine all calls to `mj_keyValuesArrayWithObjectArray:`. Ensure they are not used on objects with sensitive data that hasn't been excluded via `mj_ignoredPropertyNames`.\n\n*   **Threats Mitigated:**\n    *   **Data Leakage:** (Severity: High) - Prevents sensitive data exposure in JSON.\n    *   **Information Disclosure:** (Severity: Medium) - Reduces exposure of internal object details.\n\n*   **Impact:**\n    *   **Data Leakage:** Risk significantly reduced.\n    *   **Information Disclosure:** Risk reduced.\n\n*   **Currently Implemented:**\n    *   `mj_ignoredPropertyNames` implemented in `User` class.\n\n*   **Missing Implementation:**\n    *   `mj_ignoredPropertyNames` *not* implemented in `Product` class (potential `supplierDetails` leak).\n    *   No systematic review of `mj_keyValuesArrayWithObjectArray:` usage."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-02-13 17:05:53,224 - __main__ - ERROR - Application error: Invalid json output: ```json
{
  "mitigation_strategies": [
    {
      "title": "Strict Property Type Enforcement and Validation (MJExtension-Specific)",
      "text": "*   **Description:**\n    1.  **Precise Property Types:** Define Objective-C model properties with the most specific types possible (e.g., `NSString *`, `NSNumber *`, `NSArray<SpecificType *> *`). Avoid `id` or `NSObject` when a more concrete type is known.\n    2.  **Override `mj_newValueFromOldValue:`:** Implement this method in *each* model class that uses `MJExtension`. This is the core of this mitigation.\n    3.  **Type Checking (Inside `mj_newValueFromOldValue:`):** Use `[oldValue isKindOfClass:[ExpectedClass class]]` to verify that the incoming JSON value (`oldValue`) matches the expected type for the property.\n    4.  **Handle Type Mismatches (Inside `mj_newValueFromOldValue:`):**\n        *   If incorrect type: Return `nil` (and log), attempt a *safe* conversion (if and only if provably safe), or throw an `NSException`.\n        *   If correct type: Proceed to further validation.\n    5.  **Additional Validation (Inside `mj_newValueFromOldValue:`):** Perform property-specific validation:\n        *   `NSString`: Length checks, allowed character checks, format validation (regex).\n        *   `NSNumber`: Range checks (min/max).\n        *   `NSArray`: Element count checks.\n    6.  **Override `mj_objectClassInArray:`:** For `NSArray` properties containing custom objects, implement this method. Return a dictionary mapping the array property name to the *Class* of objects expected within the array (e.g., `@{@"posts": [Post class]}`).\n    7.  **Override `mj_replacedKeyFromPropertyName` (Optional but Recommended):** If JSON keys don't directly match property names, implement this method. Return a dictionary mapping JSON keys to property names. This improves clarity and reduces the risk of `MJExtension` making incorrect assumptions.\n\n*   **Threats Mitigated:**\n    *   **Type Confusion:** (Severity: High) - Prevents injection of unexpected data types.\n    *   **Data Validation Bypass:** (Severity: Medium) - Enforces data constraints at deserialization.\n    *   **Unexpected Behavior:** (Severity: Low) - Improves robustness against malformed input.\n\n*   **Impact:**\n    *   **Type Confusion:** Risk significantly reduced.\n    *   **Data Validation Bypass:** Risk significantly reduced.\n    *   **Unexpected Behavior:** Risk reduced.\n\n*   **Currently Implemented:**\n    *   `mj_newValueFromOldValue:` implemented in `User.m` (partial validation).\n    *   `mj_objectClassInArray` implemented in `Product.m`.\n\n*   **Missing Implementation:**\n    *   `mj_newValueFromOldValue:` *not* implemented in `Product.m`.\n    *   Incomplete validation within existing `mj_newValueFromOldValue:` implementations (missing range checks, regex).\n    *   `mj_replacedKeyFromPropertyName` not used."
    },
    {
      "title": "Preventing Class Instantiation Attacks (MJExtension-Specific)",
      "text": "*   **Description:**\n    1.  **Identify Dynamic Instantiation Points:** Find all uses of `MJExtension` that might dynamically create classes based on JSON (primarily `mj_objectClassInArray`).\n    2.  **Prefer Explicit Instantiation:** Refactor to *explicitly* create objects *before* using `MJExtension` to populate them.  This is the preferred approach.  Example:\n        ```objectivec\n        MyObject *obj = [[MyObject alloc] init];\n        [obj mj_setKeyValues:jsonDictionary]; // Populate, don't create.\n        ```\n    3.  **Whitelist (If Dynamic Instantiation is Unavoidable):** Create an `NSArray` or `NSSet` of allowed `Class` objects (e.g., `@[[User class], [Product class]]`).\n    4.  **Validate in `mj_objectClassInArray`:** Within your `mj_objectClassInArray` implementation, extract the class name from the JSON and check it against your whitelist *before* returning the `Class`.\n        ```objectivec\n        - (NSDictionary *)mj_objectClassInArray {\n            return @{\n                \"items\": [self validatedClassForPropertyName:@\"items\" fromJSON:/* JSON data */]\n            };\n        }\n\n        - (Class)validatedClassForPropertyName:(NSString *)propertyName fromJSON:(NSDictionary *)json {\n            NSString *className = ...; // Extract class name from JSON.\n            Class requestedClass = NSClassFromString(className);\n            NSArray *allowedClasses = @[[AllowedClass1 class], [AllowedClass2 class]];\n\n            if ([allowedClasses containsObject:requestedClass]) {\n                return requestedClass;\n            } else {\n                NSLog(@\"Disallowed class: %@\", className);\n                return nil; // Or throw exception.\n            }\n        }\n        ```\n    5.  **Reject Invalid Classes:** If the class name is not in the whitelist, return `nil` from `mj_objectClassInArray`, log an error, or throw an exception.\n\n*   **Threats Mitigated:**\n    *   **Arbitrary Class Instantiation:** (Severity: Critical) - Prevents instantiation of attacker-controlled classes.\n    *   **Denial of Service (DoS):** (Severity: Medium) - Prevents instantiation of resource-intensive classes.\n\n*   **Impact:**\n    *   **Arbitrary Class Instantiation:** Risk eliminated (explicit instantiation) or significantly reduced (whitelist).\n    *   **Denial of Service (DoS):** Risk reduced.\n\n*   **Currently Implemented:**\n    *   Explicit instantiation used for `User` class.\n\n*   **Missing Implementation:**\n    *   `Product` class instantiated dynamically *without* a whitelist.  This is a major vulnerability."
    },
    {
      "title": "Safe Handling of `mj_keyValuesArrayWithObjectArray:` (MJExtension-Specific)",
      "text": "*   **Description:**\n    1.  **Identify Sensitive Properties:** Review model classes for properties containing sensitive data.\n    2.  **Implement `mj_ignoredPropertyNames`:** In each model class, implement this method. Return an `NSArray` of property names to *exclude* during object-to-dictionary conversion using `mj_keyValuesArrayWithObjectArray:`.\n        ```objectivec\n        + (NSArray *)mj_ignoredPropertyNames {\n            return @[@\"sensitiveProperty1\", @\"sensitiveProperty2\"];\n        }\n        ```\n    3.  **Review Usage:** Carefully examine all calls to `mj_keyValuesArrayWithObjectArray:`. Ensure they are not used on objects with sensitive data that hasn't been excluded via `mj_ignoredPropertyNames`.\n\n*   **Threats Mitigated:**\n    *   **Data Leakage:** (Severity: High) - Prevents sensitive data exposure in JSON.\n    *   **Information Disclosure:** (Severity: Medium) - Reduces exposure of internal object details.\n\n*   **Impact:**\n    *   **Data Leakage:** Risk significantly reduced.\n    *   **Information Disclosure:** Risk reduced.\n\n*   **Currently Implemented:**\n    *   `mj_ignoredPropertyNames` implemented in `User` class.\n\n*   **Missing Implementation:**\n    *   `mj_ignoredPropertyNames` *not* implemented in `Product` class (potential `supplierDetails` leak).\n    *   No systematic review of `mj_keyValuesArrayWithObjectArray:` usage."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE . You can try to run with --resume to resume from last checkpoint.
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739466355.518685       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-13 17:06:09,823 - __main__ - INFO - Starting AI Security Analyzer
2025-02-13 17:06:09,886 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-13 17:06:32,206 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-13 17:07:13,354 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-13 17:09:09,415 - ai_security_analyzer.graphs - INFO - Actual token usage: 27349
2025-02-13 17:09:09,423 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739466551.703345       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
