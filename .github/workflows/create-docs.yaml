name: Run ai-security-analyzer on config changes

on:
  push:
    paths:
      - '**/**/config.json'

jobs:
  get_config_files:
    runs-on: ubuntu-latest
    outputs:
      config_files: ${{ steps.get_config_files.outputs.config_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get list of changed config.json files
        id: get_config_files
        uses: actions/github-script@v6
        with:
          script: |
            const commitSHA = context.sha;
            const response = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: commitSHA,
            });
            const changedFiles = response.data.files.map(f => f.filename);
            const configFilesChanged = changedFiles.filter(f => f.endsWith('config.json'));
            if (configFilesChanged.length === 0) {
              throw new Error('No changed config.json files found');
            }
            core.setOutput('config_files', JSON.stringify(configFilesChanged));

  analyze:
    needs: get_config_files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config_file: ${{ fromJson(needs.get_config_files.outputs.config_files) }}
    steps:
      - name: Calculate sleep time
        id: sleep
        run: |
          # Get index of current config file in the array
          CONFIG_FILES='${{ needs.get_config_files.outputs.config_files }}'
          CURRENT_FILE='${{ matrix.config_file }}'
          INDEX=$(echo $CONFIG_FILES | jq -r "index(\"$CURRENT_FILE\")")
          # Sleep for 8 minutes times the index
          SLEEP_TIME=$((INDEX * 480))
          echo "Sleeping for $SLEEP_TIME seconds before processing $CURRENT_FILE"
          sleep $SLEEP_TIME

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up git user
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Read config.json
        id: read_config
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const configFile = '${{ matrix.config_file }}';
            const configPath = path.join(process.env.GITHUB_WORKSPACE, configFile);
            const configContent = fs.readFileSync(configPath, 'utf8');
            const config = JSON.parse(configContent);

            let mode = 'github';
            let target = config.repo_url;
            let agent_model = config.agent_model || 'gpt-4o';
            core.setOutput('mode', mode);
            core.setOutput('target', target);

            core.setOutput('repo_url', config.repo_url || '');
            
            core.setOutput('agent_provider', config.agent_provider || 'openai');
            core.setOutput('agent_model', agent_model);
            core.setOutput('agent_temperature', config.agent_temperature || 0.0);
            
            core.setOutput('analyzer_args', config.analyzer_args || '');
            const configDir = path.dirname(configFile);
            core.setOutput('config_dir', configDir);
            // Determine the output subdirectory
            const output_subdir = `${new Date().toISOString().slice(0, 10)}-${agent_model}`;
            core.setOutput('output_subdir', output_subdir);

            // Handle agent_prompt_types
            const default_agent_prompt_types = ["sec-design", "threat-modeling", "attack-surface", "attack-tree"];
            let agent_prompt_types = config.agent_prompt_types;
            if (!Array.isArray(agent_prompt_types) || agent_prompt_types.length === 0) {
              agent_prompt_types = default_agent_prompt_types;
            }
            core.setOutput('agent_prompt_types', JSON.stringify(agent_prompt_types));

      - name: Record Start Time
        id: record_start_time
        shell: bash
        run: |
          echo "start_datetime=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Run ai-security-analyzer via Docker for each agent_prompt_type
        id: run_analyzer
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          AGENT_PROMPT_TYPES='${{ steps.read_config.outputs.agent_prompt_types }}'
          AGENT_PROVIDER='${{ steps.read_config.outputs.agent_provider }}'
          AGENT_MODEL='${{ steps.read_config.outputs.agent_model }}'
          AGENT_TEMPERATURE='${{ steps.read_config.outputs.agent_temperature }}'
          MODE='${{ steps.read_config.outputs.mode }}'
          TARGET='${{ steps.read_config.outputs.target }}'

          # Convert JSON array to bash array
          agent_prompt_types=$(echo "$AGENT_PROMPT_TYPES" | jq -r '.[]')

          mkdir -p output target_repo

          for prompt_type in $agent_prompt_types; do
            echo "Running ai-security-analyzer with agent_prompt_type: $prompt_type"
            output_file="/output/${prompt_type}.md"
            docker run --rm \
              --user $(id -u):$(id -g) \
              -v "${{ github.workspace }}/target_repo:/code" \
              -v "${{ github.workspace }}/output:/output" \
              -e OPENAI_API_KEY \
              -e LANGCHAIN_API_KEY \
              -e LANGCHAIN_TRACING_V2=true \
              -e LANGCHAIN_PROJECT=sec-docs \
              -e GOOGLE_API_KEY \
              ghcr.io/xvnpw/ai-security-analyzer:latest \
              $MODE -v -t $TARGET \
              -o "$output_file" \
              ${{ steps.read_config.outputs.analyzer_args }} \
              --agent-provider "$AGENT_PROVIDER" \
              --agent-model "$AGENT_MODEL" \
              --agent-temperature "$AGENT_TEMPERATURE" \
              --agent-prompt-type "$prompt_type" 2>&1 | tee -a ./output/ai-security-analyzer.log
          done
        shell: bash

      - name: Calculate total token count
        id: calculate_total_token_count
        run: |
          actual_token_usage=$(grep -oP 'Actual token usage: \K\d+' "./output/ai-security-analyzer.log" | awk '{sum += $1} END {print sum}')
          echo "actual_token_usage=$actual_token_usage" >> $GITHUB_OUTPUT
        shell: bash

      - name: Record End Time
        id: record_end_time
        shell: bash
        run: |
          echo "end_datetime=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Move output files to output directory
        env:
          AGENT_PROMPT_TYPES: ${{ steps.read_config.outputs.agent_prompt_types }}
        run: |
          mkdir -p ${{ steps.read_config.outputs.config_dir }}/${{ steps.read_config.outputs.output_subdir }}
          agent_prompt_types=$(echo $AGENT_PROMPT_TYPES | jq -r '.[]')
          for prompt_type in $agent_prompt_types; do
            output_file="output/${prompt_type}.md"
            if [ -f "$output_file" ]; then
              mv "$output_file" ${{ steps.read_config.outputs.config_dir }}/${{ steps.read_config.outputs.output_subdir }}/
            else
              echo "Output file $output_file not found!"
            fi
          done
        shell: bash

      - name: Create output-metadata.json
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const outputDir = path.join(
              process.env.GITHUB_WORKSPACE,
              '${{ steps.read_config.outputs.config_dir }}',
              '${{ steps.read_config.outputs.output_subdir }}'
            );
            const metadata = {
              repo_url: process.env.REPO_URL,
              analyzer_args: process.env.ANALYZER_ARGS,
              start_datetime: process.env.START_DATETIME,
              end_datetime: process.env.END_DATETIME,
              agent_provider: process.env.AGENT_PROVIDER,
              agent_model: process.env.AGENT_MODEL,
              agent_temperature: process.env.AGENT_TEMPERATURE,
              agent_prompt_types: JSON.parse(process.env.AGENT_PROMPT_TYPES),
              actual_token_usage: process.env.ACTUAL_TOKEN_USAGE,
              mode: process.env.MODE,
            };
            fs.mkdirSync(outputDir, { recursive: true });
            fs.writeFileSync(path.join(outputDir, 'output-metadata.json'), JSON.stringify(metadata, null, 2));
        env:
          REPO_URL: ${{ steps.read_config.outputs.repo_url }}
          ANALYZER_ARGS: ${{ steps.read_config.outputs.analyzer_args }}
          START_DATETIME: ${{ steps.record_start_time.outputs.start_datetime }}
          END_DATETIME: ${{ steps.record_end_time.outputs.end_datetime }}
          AGENT_PROVIDER: ${{ steps.read_config.outputs.agent_provider }}
          AGENT_MODEL: ${{ steps.read_config.outputs.agent_model }}
          AGENT_TEMPERATURE: ${{ steps.read_config.outputs.agent_temperature }}
          AGENT_PROMPT_TYPES: ${{ steps.read_config.outputs.agent_prompt_types }}
          ACTUAL_TOKEN_USAGE: ${{ steps.calculate_total_token_count.outputs.actual_token_usage }}
          MODE: ${{ steps.read_config.outputs.mode }}

      - name: Clean up target_repo
        run: |
          rm -rf target_repo/ output/
        shell: bash

      # - name: Set Branch Name
      #   id: set_branch_name
      #   run: |
      #     # Sanitize the config_file path to create a valid branch name
      #     BRANCH_NAME="ai-analyzer-output-${GITHUB_RUN_ID}-$(echo '${{ matrix.config_file }}' | tr '/\._' '-')"
      #     echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v7
      #   with:
      #     branch: ${{ steps.set_branch_name.outputs.branch_name }}
      #     commit-message: "Add security documentation generated by ai-security-analyzer for ${{ matrix.config_file }}"
      #     title: "Add security documentation generated by ai-security-analyzer for ${{ matrix.config_file }}"
      #     body: "Add security documentation generated by ai-security-analyzer for ${{ matrix.config_file }}"
      #     add-paths: |
      #       ${{ steps.read_config.outputs.config_dir }}/${{ steps.read_config.outputs.output_subdir }}/

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Add security documentation generated by ai-security-analyzer for ${{ matrix.config_file }}'
          add: ${{ steps.read_config.outputs.config_dir }}/${{ steps.read_config.outputs.output_subdir }}/
          pull: '--rebase --autostash'

      # - name: Trigger second workflow
      #   env:
      #     PAT_SECRET: ${{ secrets.PAT_SECRET }}
      #   run: |
      #     curl -X POST -H "Authorization: token $PAT_SECRET" \
      #     -H "Accept: application/vnd.github.v3+json" \
      #     https://api.github.com/repos/xvnpw/sec-docs/actions/workflows/process-repos.yaml/dispatches \
      #     -d '{"ref":"main"}'
