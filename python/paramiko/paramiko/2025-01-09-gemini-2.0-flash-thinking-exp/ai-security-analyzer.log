Unable to find image 'ghcr.io/xvnpw/ai-security-analyzer:latest' locally
latest: Pulling from xvnpw/ai-security-analyzer
38a8310d387e: Pulling fs layer
f4d80a761251: Pulling fs layer
98636e63ee65: Pulling fs layer
976ae72214aa: Pulling fs layer
d007902a3e68: Pulling fs layer
6a74ba77fcee: Pulling fs layer
20aefc12af1b: Pulling fs layer
8f1a114c690c: Pulling fs layer
abea7197442a: Pulling fs layer
b5c921081441: Pulling fs layer
e109f0568a82: Pulling fs layer
71433fcbef62: Pulling fs layer
d007902a3e68: Waiting
8f1a114c690c: Waiting
6a74ba77fcee: Waiting
abea7197442a: Waiting
20aefc12af1b: Waiting
b5c921081441: Waiting
e109f0568a82: Waiting
976ae72214aa: Waiting
38a8310d387e: Verifying Checksum
38a8310d387e: Download complete
98636e63ee65: Verifying Checksum
98636e63ee65: Download complete
d007902a3e68: Verifying Checksum
d007902a3e68: Download complete
38a8310d387e: Pull complete
976ae72214aa: Download complete
f4d80a761251: Verifying Checksum
8f1a114c690c: Verifying Checksum
8f1a114c690c: Download complete
20aefc12af1b: Verifying Checksum
20aefc12af1b: Download complete
6a74ba77fcee: Verifying Checksum
6a74ba77fcee: Download complete
abea7197442a: Download complete
71433fcbef62: Download complete
e109f0568a82: Download complete
f4d80a761251: Pull complete
98636e63ee65: Pull complete
976ae72214aa: Pull complete
d007902a3e68: Pull complete
b5c921081441: Verifying Checksum
b5c921081441: Download complete
6a74ba77fcee: Pull complete
20aefc12af1b: Pull complete
8f1a114c690c: Pull complete
abea7197442a: Pull complete
b5c921081441: Pull complete
e109f0568a82: Pull complete
71433fcbef62: Pull complete
Digest: sha256:74d3aa62420762cf8217587f5f1cec2e42b4b56554fc4d0f18532c5200a4e6c3
Status: Downloaded newer image for ghcr.io/xvnpw/ai-security-analyzer:latest
2025-01-09 16:33:43,716 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 16:33:43,752 - ai_security_analyzer.github2sd_agents - INFO - Internal step 1 of 2
2025-01-09 16:34:02,045 - ai_security_analyzer.github2sd_agents - INFO - Internal step 2 of 2
2025-01-09 16:34:19,419 - ai_security_analyzer.github2sd_agents - INFO - Getting intermediate response
2025-01-09 16:34:19,420 - ai_security_analyzer.github2sd_agents - INFO - Getting deep analysis of security design review
2025-01-09 16:34:35,755 - ai_security_analyzer.graphs - INFO - Actual token usage: 18881
2025-01-09 16:34:35,755 - __main__ - INFO - AI Security Analyzer completed successfully
2025-01-09 16:34:40,251 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 16:34:40,288 - ai_security_analyzer.github2tm_agents - INFO - Internal step 1 of 3
2025-01-09 16:34:53,182 - ai_security_analyzer.github2tm_agents - INFO - Internal step 2 of 3
2025-01-09 16:35:02,980 - ai_security_analyzer.github2tm_agents - INFO - Internal step 3 of 3
2025-01-09 16:35:08,305 - ai_security_analyzer.github2tm_agents - INFO - Getting intermediate response
2025-01-09 16:35:08,306 - ai_security_analyzer.github2tm_agents - INFO - Getting structured threat model
2025-01-09 16:35:12,494 - ai_security_analyzer.github2tm_agents - INFO - Getting threat details 1 of 4
2025-01-09 16:35:29,202 - ai_security_analyzer.github2tm_agents - INFO - Getting threat details 2 of 4
2025-01-09 16:35:46,995 - ai_security_analyzer.github2tm_agents - INFO - Getting threat details 3 of 4
2025-01-09 16:36:04,483 - ai_security_analyzer.github2tm_agents - INFO - Getting threat details 4 of 4
2025-01-09 16:36:21,190 - ai_security_analyzer.github2tm_agents - INFO - Getting threats final response
2025-01-09 16:36:21,191 - ai_security_analyzer.graphs - INFO - Actual token usage: 29336
2025-01-09 16:36:21,191 - __main__ - INFO - AI Security Analyzer completed successfully
2025-01-09 16:36:25,579 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 16:36:25,616 - ai_security_analyzer.github2as_agents - INFO - Internal step 1 of 3
2025-01-09 16:36:36,142 - ai_security_analyzer.github2as_agents - INFO - Internal step 2 of 3
2025-01-09 16:36:48,884 - ai_security_analyzer.github2as_agents - INFO - Internal step 3 of 3
2025-01-09 16:36:56,288 - ai_security_analyzer.github2as_agents - INFO - Getting intermediate response
2025-01-09 16:36:56,289 - ai_security_analyzer.github2as_agents - INFO - Getting structured attack surface analysis
2025-01-09 16:37:00,363 - ai_security_analyzer.github2as_agents - INFO - Getting attack surface details 1 of 3
2025-01-09 16:37:16,794 - ai_security_analyzer.github2as_agents - INFO - Getting attack surface details 2 of 3
2025-01-09 16:37:32,288 - ai_security_analyzer.github2as_agents - INFO - Getting attack surface details 3 of 3
2025-01-09 16:37:49,208 - ai_security_analyzer.github2as_agents - INFO - Getting attack surfaces final response
2025-01-09 16:37:49,208 - ai_security_analyzer.graphs - INFO - Actual token usage: 25557
2025-01-09 16:37:49,209 - __main__ - INFO - AI Security Analyzer completed successfully
2025-01-09 16:37:53,666 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 16:37:53,704 - ai_security_analyzer.github2at_agents - INFO - Internal step 1 of 4
2025-01-09 16:38:09,188 - ai_security_analyzer.github2at_agents - INFO - Internal step 2 of 4
2025-01-09 16:38:25,396 - ai_security_analyzer.github2at_agents - INFO - Internal step 3 of 4
2025-01-09 16:38:39,077 - ai_security_analyzer.github2at_agents - INFO - Internal step 4 of 4
2025-01-09 16:38:45,037 - ai_security_analyzer.github2at_agents - INFO - Getting intermediate response
2025-01-09 16:38:45,038 - ai_security_analyzer.github2at_agents - INFO - Getting structured attack tree path analysis
2025-01-09 16:38:45,127 - langchain_google_genai.chat_models - WARNING - Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 Resource has been exhausted (e.g. check quota)..
2025-01-09 16:38:47,196 - ai_security_analyzer.github2at_agents - ERROR - Error on structured attack tree path analysis: 429 Resource has been exhausted (e.g. check quota).
2025-01-09 16:38:47,197 - ai_security_analyzer.graphs - ERROR - Graph execution failed: 429 Resource has been exhausted (e.g. check quota).
2025-01-09 16:38:47,198 - __main__ - ERROR - Application error: 429 Resource has been exhausted (e.g. check quota).
2025-01-09 16:39:01,664 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 16:39:01,702 - ai_security_analyzer.github2at_agents - INFO - Internal step 1 of 4
2025-01-09 16:39:16,991 - ai_security_analyzer.github2at_agents - INFO - Internal step 2 of 4
2025-01-09 16:39:28,930 - ai_security_analyzer.github2at_agents - INFO - Internal step 3 of 4
2025-01-09 16:39:41,073 - ai_security_analyzer.github2at_agents - INFO - Internal step 4 of 4
2025-01-09 16:39:48,610 - ai_security_analyzer.github2at_agents - INFO - Getting intermediate response
2025-01-09 16:39:48,611 - ai_security_analyzer.github2at_agents - INFO - Getting structured attack tree path analysis
2025-01-09 16:41:18,733 - ai_security_analyzer.github2at_agents - ERROR - Error on structured attack tree path analysis: Failed to parse AttackTreeAnalysis from completion {"attack_tree_objective": "Compromise Application Using Paramiko Weaknesses (Focus on High-Risk Areas)", "attack_sub_tree_visualization": "\u2514\u2500\u2500 **Exploit Paramiko Weaknesses**\n    \u251c\u2500\u2500 `***` **Exploit Vulnerabilities in Paramiko Library** `(+)`\n    \u2502   \u2514\u2500\u2500 `***` **Leverage Known CVEs (Common Vulnerabilities and Exposures)** `(+)`\n    \u2502       \u2514\u2500\u2500 `***` **Identify and Exploit Publicly Disclosed Vulnerabilities** `(+)`\n    \u2502           \u2514\u2500\u2500 `***` **Code Injection via Malicious Input Handling** (e.g., when handling server responses or channel data) `(+)`\n    \u251c\u2500\u2500 `***` **Exploit Misuse of Paramiko by the Application** `(+)`\n    \u2502   \u251c\u2500\u2500 `***` **Weak Key Management** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Hardcoded or Default SSH Keys** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Insecure Key Storage** (e.g., world-readable files) `(+)`\n    \u2502   \u2502   \u2514\u2500\u2500 `***` **Using Weak or Predictable Passphrases for Key Encryption** `(+)`\n    \u2502   \u251c\u2500\u2500 `***` **Insufficient Host Key Verification** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Disabling Host Key Checking** `(+)`\n    \u2502   \u2502   \u2514\u2500\u2500 `***` **Accepting Any Host Key (e.g., using `AutoAddPolicy`) without User Confirmation** `(+)`\n    \u2502   \u251c\u2500\u2500 `***` **Command Injection through Paramiko Execution** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Unsanitized Input Passed to `exec_command` or similar functions** `(+)`\n    \u2502   \u2502   \u2514\u2500\u2500 `***` **Exploiting Shell Escapes or Metacharacters in Commands** `(+)`\n    \u2514\u2500\u2500 `***` **Man-in-the-Middle (MITM) Attacks Targeting Paramiko Connections** `(+)`\n        \u251c\u2500\u2500 `***` **ARP Spoofing or Network Manipulation**\n        \u251c\u2500\u2500 `***` **DNS Spoofing**\n        \u2514\u2500\u2500 `***` **Exploiting Weak Host Key Verification (as mentioned above)** `(+)`", "attack_sub_tree_paths": [{"title": "Exploit Vulnerabilities in Paramiko Library", "text": ""}, {"title": "Leverage Known CVEs (Common Vulnerabilities and Exposures)", "text": ""}, {"title": "Identify and Exploit Publicly Disclosed Vulnerabilities", "text": ""}, {"title": "Code Injection via Malicious Input Handling", "text": "(e.g., when handling server responses or channel data)"}, {"title": "Exploit Misuse of Paramiko by the Application", "text": ""}, {"title": "Weak Key Management", "text": ""}, {"title": "Hardcoded or Default SSH Keys", "text": ""}, {"title": "Insecure Key Storage", "text": "(e.g., world-readable files)"}, {"title": "Using Weak or Predictable Passphrases for Key Encryption", "text": ""}, {"title": "Insufficient Host Key Verification", "text": ""}, {"title": "Disabling Host Key Checking", "text": ""}, {"title": "Accepting Any Host Key (e.g., using `AutoAddPolicy`) without User Confirmation", "text": ""}, {"title": "Command Injection through Paramiko Execution", "text": ""}, {"title": "Unsanitized Input Passed to `exec_command` or similar functions", "text": ""}, {"title": "Exploiting Shell Escapes or Metacharacters in Commands", "text": ""}, {"title": "Man-in-the-Middle (MITM) Attacks Targeting Paramiko Connections", "text": ""}, {"title": "ARP Spoofing or Network Manipulation", "text": ""}, {"title": "DNS Spoofing", "text": ""}, {"title": "Exploiting Weak Host Key Verification (as mentioned above)", "text": ""}, {"title": "Exploit Vulnerabilities in Paramiko Library - Code Injection via Malicious Input Handling", "text": "An attacker identifies a known vulnerability (CVE) in Paramiko related to how it processes data received from the SSH server or within SSH channels. This could involve crafting malicious responses or channel data that, when parsed by Paramiko, allows the attacker to inject and execute arbitrary code on the application's server."}, {"title": "Exploit Misuse of Paramiko by the Application - Weak Key Management", "text": ""}, {"title": "Attack Vector - Hardcoded or Default SSH Keys", "text": "Developers embed SSH private keys directly within the application's source code or configuration files, or use default keys provided by the operating system or a library. Attackers who gain access to the application's codebase or configuration can easily extract these keys."}, {"title": "Impact", "text": "Direct access to any remote systems where these keys are authorized, bypassing normal authentication mechanisms."}, {"title": "Attack Vector - Insecure Key Storage", "text": "SSH private keys are stored on the application server with overly permissive file permissions (e.g., world-readable). Attackers who compromise the server through other means can easily access these keys."}, {"title": "Impact", "text": "Direct access to any remote systems where these keys are authorized."}, {"title": "Attack Vector - Using Weak or Predictable Passphrases for Key Encryption", "text": "SSH private keys are encrypted with weak or easily guessable passphrases. Attackers can attempt to brute-force these passphrases to decrypt the keys."}, {"title": "Impact", "text": "Once the key is decrypted, the attacker gains direct access to remote systems."}, {"title": "Exploit Misuse of Paramiko by the Application - Insufficient Host Key Verification", "text": ""}, {"title": "Attack Vector - Disabling Host Key Checking", "text": "The application is configured to completely disable host key verification, meaning it will connect to any SSH server without verifying its identity. This makes the application vulnerable to Man-in-the-Middle (MITM) attacks."}, {"title": "Impact", "text": "An attacker can intercept the connection and present their own malicious SSH server, potentially stealing credentials or executing commands on behalf of the application."}, {"title": "Attack Vector - Accepting Any Host Key (e.g., using `AutoAddPolicy`) without User Confirmation", "text": "The application automatically adds new host keys to its \"known_hosts\" file without prompting the user for verification. An attacker performing a MITM attack during the initial connection can inject their malicious server's key, which will then be trusted in subsequent connections."}, {"title": "Impact", "text": "Subsequent connections will be directed to the attacker's server, allowing them to intercept communication and potentially execute commands."}, {"title": "Exploit Misuse of Paramiko by the Application - Command Injection through Paramiko Execution", "text": ""}, {"title": "Attack Vector - Unsanitized Input Passed to `exec_command` or similar functions", "text": "The application takes user-provided input and directly incorporates it into commands that are executed on the remote SSH server using Paramiko's `exec_command` or similar functions, without proper sanitization or validation."}, {"title": "Impact", "text": "Attackers can inject malicious commands into the input, leading to arbitrary command execution on the remote system with the privileges of the user under which the SSH connection is established."}, {"title": "Attack Vector - Exploiting Shell Escapes or Metacharacters in Commands", "text": "Even with some input validation, attackers might be able to use shell escape characters or metacharacters to break out of the intended command context and execute arbitrary commands."}, {}]}. Got: 2 validation errors for AttackTreeAnalysis
attack_sub_tree_paths.36.title
  Field required [type=missing, input_value={}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
attack_sub_tree_paths.36.text
  Field required [type=missing, input_value={}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-01-09 16:41:18,733 - ai_security_analyzer.graphs - ERROR - Graph execution failed: Failed to parse AttackTreeAnalysis from completion {"attack_tree_objective": "Compromise Application Using Paramiko Weaknesses (Focus on High-Risk Areas)", "attack_sub_tree_visualization": "\u2514\u2500\u2500 **Exploit Paramiko Weaknesses**\n    \u251c\u2500\u2500 `***` **Exploit Vulnerabilities in Paramiko Library** `(+)`\n    \u2502   \u2514\u2500\u2500 `***` **Leverage Known CVEs (Common Vulnerabilities and Exposures)** `(+)`\n    \u2502       \u2514\u2500\u2500 `***` **Identify and Exploit Publicly Disclosed Vulnerabilities** `(+)`\n    \u2502           \u2514\u2500\u2500 `***` **Code Injection via Malicious Input Handling** (e.g., when handling server responses or channel data) `(+)`\n    \u251c\u2500\u2500 `***` **Exploit Misuse of Paramiko by the Application** `(+)`\n    \u2502   \u251c\u2500\u2500 `***` **Weak Key Management** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Hardcoded or Default SSH Keys** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Insecure Key Storage** (e.g., world-readable files) `(+)`\n    \u2502   \u2502   \u2514\u2500\u2500 `***` **Using Weak or Predictable Passphrases for Key Encryption** `(+)`\n    \u2502   \u251c\u2500\u2500 `***` **Insufficient Host Key Verification** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Disabling Host Key Checking** `(+)`\n    \u2502   \u2502   \u2514\u2500\u2500 `***` **Accepting Any Host Key (e.g., using `AutoAddPolicy`) without User Confirmation** `(+)`\n    \u2502   \u251c\u2500\u2500 `***` **Command Injection through Paramiko Execution** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Unsanitized Input Passed to `exec_command` or similar functions** `(+)`\n    \u2502   \u2502   \u2514\u2500\u2500 `***` **Exploiting Shell Escapes or Metacharacters in Commands** `(+)`\n    \u2514\u2500\u2500 `***` **Man-in-the-Middle (MITM) Attacks Targeting Paramiko Connections** `(+)`\n        \u251c\u2500\u2500 `***` **ARP Spoofing or Network Manipulation**\n        \u251c\u2500\u2500 `***` **DNS Spoofing**\n        \u2514\u2500\u2500 `***` **Exploiting Weak Host Key Verification (as mentioned above)** `(+)`", "attack_sub_tree_paths": [{"title": "Exploit Vulnerabilities in Paramiko Library", "text": ""}, {"title": "Leverage Known CVEs (Common Vulnerabilities and Exposures)", "text": ""}, {"title": "Identify and Exploit Publicly Disclosed Vulnerabilities", "text": ""}, {"title": "Code Injection via Malicious Input Handling", "text": "(e.g., when handling server responses or channel data)"}, {"title": "Exploit Misuse of Paramiko by the Application", "text": ""}, {"title": "Weak Key Management", "text": ""}, {"title": "Hardcoded or Default SSH Keys", "text": ""}, {"title": "Insecure Key Storage", "text": "(e.g., world-readable files)"}, {"title": "Using Weak or Predictable Passphrases for Key Encryption", "text": ""}, {"title": "Insufficient Host Key Verification", "text": ""}, {"title": "Disabling Host Key Checking", "text": ""}, {"title": "Accepting Any Host Key (e.g., using `AutoAddPolicy`) without User Confirmation", "text": ""}, {"title": "Command Injection through Paramiko Execution", "text": ""}, {"title": "Unsanitized Input Passed to `exec_command` or similar functions", "text": ""}, {"title": "Exploiting Shell Escapes or Metacharacters in Commands", "text": ""}, {"title": "Man-in-the-Middle (MITM) Attacks Targeting Paramiko Connections", "text": ""}, {"title": "ARP Spoofing or Network Manipulation", "text": ""}, {"title": "DNS Spoofing", "text": ""}, {"title": "Exploiting Weak Host Key Verification (as mentioned above)", "text": ""}, {"title": "Exploit Vulnerabilities in Paramiko Library - Code Injection via Malicious Input Handling", "text": "An attacker identifies a known vulnerability (CVE) in Paramiko related to how it processes data received from the SSH server or within SSH channels. This could involve crafting malicious responses or channel data that, when parsed by Paramiko, allows the attacker to inject and execute arbitrary code on the application's server."}, {"title": "Exploit Misuse of Paramiko by the Application - Weak Key Management", "text": ""}, {"title": "Attack Vector - Hardcoded or Default SSH Keys", "text": "Developers embed SSH private keys directly within the application's source code or configuration files, or use default keys provided by the operating system or a library. Attackers who gain access to the application's codebase or configuration can easily extract these keys."}, {"title": "Impact", "text": "Direct access to any remote systems where these keys are authorized, bypassing normal authentication mechanisms."}, {"title": "Attack Vector - Insecure Key Storage", "text": "SSH private keys are stored on the application server with overly permissive file permissions (e.g., world-readable). Attackers who compromise the server through other means can easily access these keys."}, {"title": "Impact", "text": "Direct access to any remote systems where these keys are authorized."}, {"title": "Attack Vector - Using Weak or Predictable Passphrases for Key Encryption", "text": "SSH private keys are encrypted with weak or easily guessable passphrases. Attackers can attempt to brute-force these passphrases to decrypt the keys."}, {"title": "Impact", "text": "Once the key is decrypted, the attacker gains direct access to remote systems."}, {"title": "Exploit Misuse of Paramiko by the Application - Insufficient Host Key Verification", "text": ""}, {"title": "Attack Vector - Disabling Host Key Checking", "text": "The application is configured to completely disable host key verification, meaning it will connect to any SSH server without verifying its identity. This makes the application vulnerable to Man-in-the-Middle (MITM) attacks."}, {"title": "Impact", "text": "An attacker can intercept the connection and present their own malicious SSH server, potentially stealing credentials or executing commands on behalf of the application."}, {"title": "Attack Vector - Accepting Any Host Key (e.g., using `AutoAddPolicy`) without User Confirmation", "text": "The application automatically adds new host keys to its \"known_hosts\" file without prompting the user for verification. An attacker performing a MITM attack during the initial connection can inject their malicious server's key, which will then be trusted in subsequent connections."}, {"title": "Impact", "text": "Subsequent connections will be directed to the attacker's server, allowing them to intercept communication and potentially execute commands."}, {"title": "Exploit Misuse of Paramiko by the Application - Command Injection through Paramiko Execution", "text": ""}, {"title": "Attack Vector - Unsanitized Input Passed to `exec_command` or similar functions", "text": "The application takes user-provided input and directly incorporates it into commands that are executed on the remote SSH server using Paramiko's `exec_command` or similar functions, without proper sanitization or validation."}, {"title": "Impact", "text": "Attackers can inject malicious commands into the input, leading to arbitrary command execution on the remote system with the privileges of the user under which the SSH connection is established."}, {"title": "Attack Vector - Exploiting Shell Escapes or Metacharacters in Commands", "text": "Even with some input validation, attackers might be able to use shell escape characters or metacharacters to break out of the intended command context and execute arbitrary commands."}, {}]}. Got: 2 validation errors for AttackTreeAnalysis
attack_sub_tree_paths.36.title
  Field required [type=missing, input_value={}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
attack_sub_tree_paths.36.text
  Field required [type=missing, input_value={}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-01-09 16:41:18,733 - __main__ - ERROR - Application error: Failed to parse AttackTreeAnalysis from completion {"attack_tree_objective": "Compromise Application Using Paramiko Weaknesses (Focus on High-Risk Areas)", "attack_sub_tree_visualization": "\u2514\u2500\u2500 **Exploit Paramiko Weaknesses**\n    \u251c\u2500\u2500 `***` **Exploit Vulnerabilities in Paramiko Library** `(+)`\n    \u2502   \u2514\u2500\u2500 `***` **Leverage Known CVEs (Common Vulnerabilities and Exposures)** `(+)`\n    \u2502       \u2514\u2500\u2500 `***` **Identify and Exploit Publicly Disclosed Vulnerabilities** `(+)`\n    \u2502           \u2514\u2500\u2500 `***` **Code Injection via Malicious Input Handling** (e.g., when handling server responses or channel data) `(+)`\n    \u251c\u2500\u2500 `***` **Exploit Misuse of Paramiko by the Application** `(+)`\n    \u2502   \u251c\u2500\u2500 `***` **Weak Key Management** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Hardcoded or Default SSH Keys** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Insecure Key Storage** (e.g., world-readable files) `(+)`\n    \u2502   \u2502   \u2514\u2500\u2500 `***` **Using Weak or Predictable Passphrases for Key Encryption** `(+)`\n    \u2502   \u251c\u2500\u2500 `***` **Insufficient Host Key Verification** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Disabling Host Key Checking** `(+)`\n    \u2502   \u2502   \u2514\u2500\u2500 `***` **Accepting Any Host Key (e.g., using `AutoAddPolicy`) without User Confirmation** `(+)`\n    \u2502   \u251c\u2500\u2500 `***` **Command Injection through Paramiko Execution** `(+)`\n    \u2502   \u2502   \u251c\u2500\u2500 `***` **Unsanitized Input Passed to `exec_command` or similar functions** `(+)`\n    \u2502   \u2502   \u2514\u2500\u2500 `***` **Exploiting Shell Escapes or Metacharacters in Commands** `(+)`\n    \u2514\u2500\u2500 `***` **Man-in-the-Middle (MITM) Attacks Targeting Paramiko Connections** `(+)`\n        \u251c\u2500\u2500 `***` **ARP Spoofing or Network Manipulation**\n        \u251c\u2500\u2500 `***` **DNS Spoofing**\n        \u2514\u2500\u2500 `***` **Exploiting Weak Host Key Verification (as mentioned above)** `(+)`", "attack_sub_tree_paths": [{"title": "Exploit Vulnerabilities in Paramiko Library", "text": ""}, {"title": "Leverage Known CVEs (Common Vulnerabilities and Exposures)", "text": ""}, {"title": "Identify and Exploit Publicly Disclosed Vulnerabilities", "text": ""}, {"title": "Code Injection via Malicious Input Handling", "text": "(e.g., when handling server responses or channel data)"}, {"title": "Exploit Misuse of Paramiko by the Application", "text": ""}, {"title": "Weak Key Management", "text": ""}, {"title": "Hardcoded or Default SSH Keys", "text": ""}, {"title": "Insecure Key Storage", "text": "(e.g., world-readable files)"}, {"title": "Using Weak or Predictable Passphrases for Key Encryption", "text": ""}, {"title": "Insufficient Host Key Verification", "text": ""}, {"title": "Disabling Host Key Checking", "text": ""}, {"title": "Accepting Any Host Key (e.g., using `AutoAddPolicy`) without User Confirmation", "text": ""}, {"title": "Command Injection through Paramiko Execution", "text": ""}, {"title": "Unsanitized Input Passed to `exec_command` or similar functions", "text": ""}, {"title": "Exploiting Shell Escapes or Metacharacters in Commands", "text": ""}, {"title": "Man-in-the-Middle (MITM) Attacks Targeting Paramiko Connections", "text": ""}, {"title": "ARP Spoofing or Network Manipulation", "text": ""}, {"title": "DNS Spoofing", "text": ""}, {"title": "Exploiting Weak Host Key Verification (as mentioned above)", "text": ""}, {"title": "Exploit Vulnerabilities in Paramiko Library - Code Injection via Malicious Input Handling", "text": "An attacker identifies a known vulnerability (CVE) in Paramiko related to how it processes data received from the SSH server or within SSH channels. This could involve crafting malicious responses or channel data that, when parsed by Paramiko, allows the attacker to inject and execute arbitrary code on the application's server."}, {"title": "Exploit Misuse of Paramiko by the Application - Weak Key Management", "text": ""}, {"title": "Attack Vector - Hardcoded or Default SSH Keys", "text": "Developers embed SSH private keys directly within the application's source code or configuration files, or use default keys provided by the operating system or a library. Attackers who gain access to the application's codebase or configuration can easily extract these keys."}, {"title": "Impact", "text": "Direct access to any remote systems where these keys are authorized, bypassing normal authentication mechanisms."}, {"title": "Attack Vector - Insecure Key Storage", "text": "SSH private keys are stored on the application server with overly permissive file permissions (e.g., world-readable). Attackers who compromise the server through other means can easily access these keys."}, {"title": "Impact", "text": "Direct access to any remote systems where these keys are authorized."}, {"title": "Attack Vector - Using Weak or Predictable Passphrases for Key Encryption", "text": "SSH private keys are encrypted with weak or easily guessable passphrases. Attackers can attempt to brute-force these passphrases to decrypt the keys."}, {"title": "Impact", "text": "Once the key is decrypted, the attacker gains direct access to remote systems."}, {"title": "Exploit Misuse of Paramiko by the Application - Insufficient Host Key Verification", "text": ""}, {"title": "Attack Vector - Disabling Host Key Checking", "text": "The application is configured to completely disable host key verification, meaning it will connect to any SSH server without verifying its identity. This makes the application vulnerable to Man-in-the-Middle (MITM) attacks."}, {"title": "Impact", "text": "An attacker can intercept the connection and present their own malicious SSH server, potentially stealing credentials or executing commands on behalf of the application."}, {"title": "Attack Vector - Accepting Any Host Key (e.g., using `AutoAddPolicy`) without User Confirmation", "text": "The application automatically adds new host keys to its \"known_hosts\" file without prompting the user for verification. An attacker performing a MITM attack during the initial connection can inject their malicious server's key, which will then be trusted in subsequent connections."}, {"title": "Impact", "text": "Subsequent connections will be directed to the attacker's server, allowing them to intercept communication and potentially execute commands."}, {"title": "Exploit Misuse of Paramiko by the Application - Command Injection through Paramiko Execution", "text": ""}, {"title": "Attack Vector - Unsanitized Input Passed to `exec_command` or similar functions", "text": "The application takes user-provided input and directly incorporates it into commands that are executed on the remote SSH server using Paramiko's `exec_command` or similar functions, without proper sanitization or validation."}, {"title": "Impact", "text": "Attackers can inject malicious commands into the input, leading to arbitrary command execution on the remote system with the privileges of the user under which the SSH connection is established."}, {"title": "Attack Vector - Exploiting Shell Escapes or Metacharacters in Commands", "text": "Even with some input validation, attackers might be able to use shell escape characters or metacharacters to break out of the intended command context and execute arbitrary commands."}, {}]}. Got: 2 validation errors for AttackTreeAnalysis
attack_sub_tree_paths.36.title
  Field required [type=missing, input_value={}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
attack_sub_tree_paths.36.text
  Field required [type=missing, input_value={}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-01-09 16:41:33,149 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 16:41:33,187 - ai_security_analyzer.github2at_agents - INFO - Internal step 1 of 4
2025-01-09 16:41:48,092 - ai_security_analyzer.github2at_agents - INFO - Internal step 2 of 4
2025-01-09 16:42:06,486 - ai_security_analyzer.github2at_agents - INFO - Internal step 3 of 4
2025-01-09 16:42:20,786 - ai_security_analyzer.github2at_agents - INFO - Internal step 4 of 4
2025-01-09 16:42:24,738 - ai_security_analyzer.github2at_agents - INFO - Getting intermediate response
2025-01-09 16:42:24,739 - ai_security_analyzer.github2at_agents - INFO - Getting structured attack tree path analysis
2025-01-09 16:42:28,964 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 1 of 10
2025-01-09 16:42:41,962 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 2 of 10
2025-01-09 16:42:58,725 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 3 of 10
2025-01-09 16:43:14,353 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 4 of 10
2025-01-09 16:43:30,906 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 5 of 10
2025-01-09 16:43:46,284 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 6 of 10
2025-01-09 16:44:00,866 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 7 of 10
2025-01-09 16:44:16,786 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 8 of 10
2025-01-09 16:44:32,183 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 9 of 10
2025-01-09 16:44:47,007 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 10 of 10
2025-01-09 16:45:01,334 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree paths final response
2025-01-09 16:45:01,335 - ai_security_analyzer.graphs - INFO - Actual token usage: 66907
2025-01-09 16:45:01,336 - __main__ - INFO - AI Security Analyzer completed successfully
