Unable to find image 'ghcr.io/xvnpw/ai-security-analyzer:latest' locally
latest: Pulling from xvnpw/ai-security-analyzer
38a8310d387e: Pulling fs layer
f4d80a761251: Pulling fs layer
98636e63ee65: Pulling fs layer
976ae72214aa: Pulling fs layer
d007902a3e68: Pulling fs layer
6a74ba77fcee: Pulling fs layer
20aefc12af1b: Pulling fs layer
8f1a114c690c: Pulling fs layer
abea7197442a: Pulling fs layer
b5c921081441: Pulling fs layer
e109f0568a82: Pulling fs layer
71433fcbef62: Pulling fs layer
976ae72214aa: Waiting
d007902a3e68: Waiting
8f1a114c690c: Waiting
6a74ba77fcee: Waiting
20aefc12af1b: Waiting
e109f0568a82: Waiting
b5c921081441: Waiting
71433fcbef62: Waiting
38a8310d387e: Verifying Checksum
38a8310d387e: Download complete
f4d80a761251: Verifying Checksum
f4d80a761251: Download complete
38a8310d387e: Pull complete
98636e63ee65: Verifying Checksum
98636e63ee65: Download complete
d007902a3e68: Verifying Checksum
d007902a3e68: Download complete
20aefc12af1b: Verifying Checksum
20aefc12af1b: Download complete
976ae72214aa: Verifying Checksum
976ae72214aa: Download complete
8f1a114c690c: Verifying Checksum
8f1a114c690c: Download complete
abea7197442a: Verifying Checksum
abea7197442a: Download complete
6a74ba77fcee: Verifying Checksum
6a74ba77fcee: Download complete
f4d80a761251: Pull complete
71433fcbef62: Verifying Checksum
71433fcbef62: Download complete
e109f0568a82: Download complete
98636e63ee65: Pull complete
976ae72214aa: Pull complete
d007902a3e68: Pull complete
b5c921081441: Verifying Checksum
b5c921081441: Download complete
6a74ba77fcee: Pull complete
20aefc12af1b: Pull complete
8f1a114c690c: Pull complete
abea7197442a: Pull complete
b5c921081441: Pull complete
e109f0568a82: Pull complete
71433fcbef62: Pull complete
Digest: sha256:74d3aa62420762cf8217587f5f1cec2e42b4b56554fc4d0f18532c5200a4e6c3
Status: Downloaded newer image for ghcr.io/xvnpw/ai-security-analyzer:latest
2025-01-09 18:31:21,984 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 18:31:22,019 - ai_security_analyzer.github2sd_agents - INFO - Internal step 1 of 2
2025-01-09 18:31:39,843 - ai_security_analyzer.github2sd_agents - INFO - Internal step 2 of 2
2025-01-09 18:31:59,450 - ai_security_analyzer.github2sd_agents - INFO - Getting intermediate response
2025-01-09 18:31:59,450 - ai_security_analyzer.github2sd_agents - INFO - Getting deep analysis of security design review
2025-01-09 18:32:17,682 - ai_security_analyzer.graphs - INFO - Actual token usage: 18572
2025-01-09 18:32:17,682 - __main__ - INFO - AI Security Analyzer completed successfully
2025-01-09 18:32:22,266 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 18:32:22,304 - ai_security_analyzer.github2tm_agents - INFO - Internal step 1 of 3
2025-01-09 18:32:35,360 - ai_security_analyzer.github2tm_agents - INFO - Internal step 2 of 3
2025-01-09 18:32:56,260 - ai_security_analyzer.github2tm_agents - INFO - Internal step 3 of 3
2025-01-09 18:33:05,381 - ai_security_analyzer.github2tm_agents - INFO - Getting intermediate response
2025-01-09 18:33:05,382 - ai_security_analyzer.github2tm_agents - INFO - Getting structured threat model
2025-01-09 18:33:10,687 - ai_security_analyzer.github2tm_agents - INFO - Getting threat details 1 of 5
2025-01-09 18:33:28,892 - ai_security_analyzer.github2tm_agents - INFO - Getting threat details 2 of 5
2025-01-09 18:33:44,248 - ai_security_analyzer.github2tm_agents - INFO - Getting threat details 3 of 5
2025-01-09 18:34:00,333 - ai_security_analyzer.github2tm_agents - INFO - Getting threat details 4 of 5
2025-01-09 18:34:15,265 - ai_security_analyzer.github2tm_agents - INFO - Getting threat details 5 of 5
2025-01-09 18:34:29,812 - ai_security_analyzer.github2tm_agents - INFO - Getting threats final response
2025-01-09 18:34:29,813 - ai_security_analyzer.graphs - INFO - Actual token usage: 39120
2025-01-09 18:34:29,814 - __main__ - INFO - AI Security Analyzer completed successfully
2025-01-09 18:34:34,255 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 18:34:34,293 - ai_security_analyzer.github2as_agents - INFO - Internal step 1 of 3
2025-01-09 18:34:43,936 - ai_security_analyzer.github2as_agents - INFO - Internal step 2 of 3
2025-01-09 18:34:55,705 - ai_security_analyzer.github2as_agents - INFO - Internal step 3 of 3
2025-01-09 18:35:01,029 - ai_security_analyzer.github2as_agents - INFO - Getting intermediate response
2025-01-09 18:35:01,029 - ai_security_analyzer.github2as_agents - INFO - Getting structured attack surface analysis
2025-01-09 18:35:06,057 - ai_security_analyzer.github2as_agents - INFO - Getting attack surface details 1 of 4
2025-01-09 18:35:23,827 - ai_security_analyzer.github2as_agents - INFO - Getting attack surface details 2 of 4
2025-01-09 18:35:42,077 - ai_security_analyzer.github2as_agents - INFO - Getting attack surface details 3 of 4
2025-01-09 18:35:57,200 - ai_security_analyzer.github2as_agents - INFO - Getting attack surface details 4 of 4
2025-01-09 18:36:15,811 - ai_security_analyzer.github2as_agents - INFO - Getting attack surfaces final response
2025-01-09 18:36:15,812 - ai_security_analyzer.graphs - INFO - Actual token usage: 29240
2025-01-09 18:36:15,812 - __main__ - INFO - AI Security Analyzer completed successfully
2025-01-09 18:36:20,344 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 18:36:20,381 - ai_security_analyzer.github2at_agents - INFO - Internal step 1 of 4
2025-01-09 18:36:43,961 - ai_security_analyzer.github2at_agents - INFO - Internal step 2 of 4
2025-01-09 18:36:57,397 - ai_security_analyzer.github2at_agents - INFO - Internal step 3 of 4
2025-01-09 18:37:10,377 - ai_security_analyzer.github2at_agents - INFO - Internal step 4 of 4
2025-01-09 18:37:16,789 - ai_security_analyzer.github2at_agents - INFO - Getting intermediate response
2025-01-09 18:37:16,790 - ai_security_analyzer.github2at_agents - INFO - Getting structured attack tree path analysis
2025-01-09 18:37:23,055 - ai_security_analyzer.github2at_agents - ERROR - Error on structured attack tree path analysis: Failed to parse AttackTreeAnalysis from completion {"attack_tree_objective": "Successfully execute unauthorized transactions or gain access to sensitive payment information by exploiting vulnerabilities within the application's usage of the Active Merchant library.", "attack_sub_tree_visualization": "*   Compromise Application Using Active Merchant [CRITICAL NODE]\n    *   Exploit Insecure Configuration [CRITICAL NODE]\n        *   Expose API Credentials [CRITICAL NODE]\n            *   Hardcoded Credentials [HIGH-RISK PATH]\n            *   Insecure Storage (e.g., plain text config files) [HIGH-RISK PATH]\n    *   Exploit Vulnerabilities within Active Merchant\n        *   Exploit Known Vulnerabilities\n            *   Use Outdated Version with Known Exploits [HIGH-RISK PATH]\n    *   Exploit Insecure Application Logic Utilizing Active Merchant [CRITICAL NODE]\n        *   Bypass Payment Processing Logic [HIGH-RISK PATH]\n            *   Manipulate Request Parameters Before Sending to Active Merchant [HIGH-RISK PATH]\n            *   Replay Successful Payment Requests [HIGH-RISK PATH]\n        *   Leak Sensitive Payment Information [HIGH-RISK PATH]\n            *   Information Disclosure via Error Messages from Active Merchant [HIGH-RISK PATH]\n            *   Insecure Logging of Sensitive Data Handled by Active Merchant [HIGH-RISK PATH]\n        *   Abuse Refund/Void Functionality if Exposed Insecurely [HIGH-RISK PATH]\n        *   Exploit Insecure Webhook Handling (if applicable) [HIGH-RISK PATH]\n            *   Spoof Webhook Requests Mimicking Gateway Responses [HIGH-RISK PATH]\n            *   Manipulate Webhook Data Processed After Active Merchant Interaction [HIGH-RISK PATH]", "attack_sub_tree_paths": [{"title": "Compromise Application Using Active Merchant [CRITICAL NODE]", "text": "This is the root goal of the attacker and represents the ultimate success in exploiting the application through its use of Active Merchant."}, {"title": "Exploit Insecure Configuration [CRITICAL NODE]", "text": "This category of attacks targets weaknesses in how the application is set up and configured to use Active Merchant. Insecure configuration can directly expose sensitive information or create pathways for other attacks."}, {"title": "Expose API Credentials [CRITICAL NODE]", "text": "If the application's API credentials for the payment gateway are exposed, an attacker can directly interact with the gateway as the legitimate application, bypassing application logic."}, {"title": "Hardcoded Credentials [HIGH-RISK PATH]", "text": "Credentials directly written into the application code are easily discoverable through static analysis or by gaining access to the codebase."}, {"title": "Insecure Storage (e.g., plain text config files) [HIGH-RISK PATH]", "text": "Storing credentials in plain text configuration files or easily accessible locations on the server allows for unauthorized access through file system access or other vulnerabilities."}, {"title": "Exploit Vulnerabilities within Active Merchant", "text": "This category focuses on exploiting weaknesses directly within the Active Merchant library itself."}, {"title": "Exploit Known Vulnerabilities", "text": null}, {"title": "Use Outdated Version with Known Exploits [HIGH-RISK PATH]", "text": "Failing to update Active Merchant to the latest version leaves the application vulnerable to publicly known exploits that have been patched in newer releases."}, {"title": "Exploit Insecure Application Logic Utilizing Active Merchant [CRITICAL NODE]", "text": "This category encompasses vulnerabilities arising from flaws in the application's code that integrates with and uses the Active Merchant library."}, {"title": "Bypass Payment Processing Logic [HIGH-RISK PATH]", "text": "Flaws in the application's code can allow attackers to circumvent the intended payment processing flow."}, {"title": "Manipulate Request Parameters Before Sending to Active Merchant [HIGH-RISK PATH]", "text": "Modifying parameters (e.g., amount, currency) before they are passed to Active Merchant can lead to incorrect transaction amounts being processed."}, {"title": "Replay Successful Payment Requests [HIGH-RISK PATH]", "text": "Capturing and replaying successful payment requests can allow attackers to gain goods or services without paying again if proper idempotency measures are not in place."}, {"title": "Leak Sensitive Payment Information [HIGH-RISK PATH]", "text": "The application might unintentionally expose sensitive data handled by Active Merchant."}, {"title": "Information Disclosure via Error Messages from Active Merchant [HIGH-RISK PATH]", "text": "Displaying raw or overly detailed error messages from Active Merchant can reveal sensitive information about the payment process or gateway responses to users."}, {"title": "Insecure Logging of Sensitive Data Handled by Active Merchant [HIGH-RISK PATH]", "text": "Logging full credit card numbers, CVV codes, or other sensitive transaction details in application logs creates a significant security vulnerability if these logs are compromised."}, {"title": "Abuse Refund/Void Functionality if Exposed Insecurely [HIGH-RISK PATH]", "text": "If the application exposes refund or void functionalities without proper authorization checks, an attacker could abuse Active Merchant's methods to initiate unauthorized refunds, leading to financial loss."}, {"title": "Exploit Insecure Webhook Handling (if applicable) [HIGH-RISK PATH]", "text": "If the application uses webhooks for payment confirmations or updates, vulnerabilities in how these webhooks are handled can be exploited."}, {"title": "Spoof Webhook Requests Mimicking Gateway Responses [HIGH-RISK PATH]", "text": "Sending fake webhook requests that mimic the structure and content of legitimate gateway responses can trick the application into believing a fraudulent payment was successful."}, {"title": "Manipulate Webhook Data Processed After Active Merchant Interaction [HIGH-RISK PATH]", "text": "Exploiting vulnerabilities in how the application processes webhook data received after Active Merchant has interacted with the gateway can allow attackers to manipulate order status or other critical data."}]}. Got: 1 validation error for AttackTreeAnalysis
attack_sub_tree_paths.6.text
  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-01-09 18:37:23,055 - ai_security_analyzer.graphs - ERROR - Graph execution failed: Failed to parse AttackTreeAnalysis from completion {"attack_tree_objective": "Successfully execute unauthorized transactions or gain access to sensitive payment information by exploiting vulnerabilities within the application's usage of the Active Merchant library.", "attack_sub_tree_visualization": "*   Compromise Application Using Active Merchant [CRITICAL NODE]\n    *   Exploit Insecure Configuration [CRITICAL NODE]\n        *   Expose API Credentials [CRITICAL NODE]\n            *   Hardcoded Credentials [HIGH-RISK PATH]\n            *   Insecure Storage (e.g., plain text config files) [HIGH-RISK PATH]\n    *   Exploit Vulnerabilities within Active Merchant\n        *   Exploit Known Vulnerabilities\n            *   Use Outdated Version with Known Exploits [HIGH-RISK PATH]\n    *   Exploit Insecure Application Logic Utilizing Active Merchant [CRITICAL NODE]\n        *   Bypass Payment Processing Logic [HIGH-RISK PATH]\n            *   Manipulate Request Parameters Before Sending to Active Merchant [HIGH-RISK PATH]\n            *   Replay Successful Payment Requests [HIGH-RISK PATH]\n        *   Leak Sensitive Payment Information [HIGH-RISK PATH]\n            *   Information Disclosure via Error Messages from Active Merchant [HIGH-RISK PATH]\n            *   Insecure Logging of Sensitive Data Handled by Active Merchant [HIGH-RISK PATH]\n        *   Abuse Refund/Void Functionality if Exposed Insecurely [HIGH-RISK PATH]\n        *   Exploit Insecure Webhook Handling (if applicable) [HIGH-RISK PATH]\n            *   Spoof Webhook Requests Mimicking Gateway Responses [HIGH-RISK PATH]\n            *   Manipulate Webhook Data Processed After Active Merchant Interaction [HIGH-RISK PATH]", "attack_sub_tree_paths": [{"title": "Compromise Application Using Active Merchant [CRITICAL NODE]", "text": "This is the root goal of the attacker and represents the ultimate success in exploiting the application through its use of Active Merchant."}, {"title": "Exploit Insecure Configuration [CRITICAL NODE]", "text": "This category of attacks targets weaknesses in how the application is set up and configured to use Active Merchant. Insecure configuration can directly expose sensitive information or create pathways for other attacks."}, {"title": "Expose API Credentials [CRITICAL NODE]", "text": "If the application's API credentials for the payment gateway are exposed, an attacker can directly interact with the gateway as the legitimate application, bypassing application logic."}, {"title": "Hardcoded Credentials [HIGH-RISK PATH]", "text": "Credentials directly written into the application code are easily discoverable through static analysis or by gaining access to the codebase."}, {"title": "Insecure Storage (e.g., plain text config files) [HIGH-RISK PATH]", "text": "Storing credentials in plain text configuration files or easily accessible locations on the server allows for unauthorized access through file system access or other vulnerabilities."}, {"title": "Exploit Vulnerabilities within Active Merchant", "text": "This category focuses on exploiting weaknesses directly within the Active Merchant library itself."}, {"title": "Exploit Known Vulnerabilities", "text": null}, {"title": "Use Outdated Version with Known Exploits [HIGH-RISK PATH]", "text": "Failing to update Active Merchant to the latest version leaves the application vulnerable to publicly known exploits that have been patched in newer releases."}, {"title": "Exploit Insecure Application Logic Utilizing Active Merchant [CRITICAL NODE]", "text": "This category encompasses vulnerabilities arising from flaws in the application's code that integrates with and uses the Active Merchant library."}, {"title": "Bypass Payment Processing Logic [HIGH-RISK PATH]", "text": "Flaws in the application's code can allow attackers to circumvent the intended payment processing flow."}, {"title": "Manipulate Request Parameters Before Sending to Active Merchant [HIGH-RISK PATH]", "text": "Modifying parameters (e.g., amount, currency) before they are passed to Active Merchant can lead to incorrect transaction amounts being processed."}, {"title": "Replay Successful Payment Requests [HIGH-RISK PATH]", "text": "Capturing and replaying successful payment requests can allow attackers to gain goods or services without paying again if proper idempotency measures are not in place."}, {"title": "Leak Sensitive Payment Information [HIGH-RISK PATH]", "text": "The application might unintentionally expose sensitive data handled by Active Merchant."}, {"title": "Information Disclosure via Error Messages from Active Merchant [HIGH-RISK PATH]", "text": "Displaying raw or overly detailed error messages from Active Merchant can reveal sensitive information about the payment process or gateway responses to users."}, {"title": "Insecure Logging of Sensitive Data Handled by Active Merchant [HIGH-RISK PATH]", "text": "Logging full credit card numbers, CVV codes, or other sensitive transaction details in application logs creates a significant security vulnerability if these logs are compromised."}, {"title": "Abuse Refund/Void Functionality if Exposed Insecurely [HIGH-RISK PATH]", "text": "If the application exposes refund or void functionalities without proper authorization checks, an attacker could abuse Active Merchant's methods to initiate unauthorized refunds, leading to financial loss."}, {"title": "Exploit Insecure Webhook Handling (if applicable) [HIGH-RISK PATH]", "text": "If the application uses webhooks for payment confirmations or updates, vulnerabilities in how these webhooks are handled can be exploited."}, {"title": "Spoof Webhook Requests Mimicking Gateway Responses [HIGH-RISK PATH]", "text": "Sending fake webhook requests that mimic the structure and content of legitimate gateway responses can trick the application into believing a fraudulent payment was successful."}, {"title": "Manipulate Webhook Data Processed After Active Merchant Interaction [HIGH-RISK PATH]", "text": "Exploiting vulnerabilities in how the application processes webhook data received after Active Merchant has interacted with the gateway can allow attackers to manipulate order status or other critical data."}]}. Got: 1 validation error for AttackTreeAnalysis
attack_sub_tree_paths.6.text
  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-01-09 18:37:23,055 - __main__ - ERROR - Application error: Failed to parse AttackTreeAnalysis from completion {"attack_tree_objective": "Successfully execute unauthorized transactions or gain access to sensitive payment information by exploiting vulnerabilities within the application's usage of the Active Merchant library.", "attack_sub_tree_visualization": "*   Compromise Application Using Active Merchant [CRITICAL NODE]\n    *   Exploit Insecure Configuration [CRITICAL NODE]\n        *   Expose API Credentials [CRITICAL NODE]\n            *   Hardcoded Credentials [HIGH-RISK PATH]\n            *   Insecure Storage (e.g., plain text config files) [HIGH-RISK PATH]\n    *   Exploit Vulnerabilities within Active Merchant\n        *   Exploit Known Vulnerabilities\n            *   Use Outdated Version with Known Exploits [HIGH-RISK PATH]\n    *   Exploit Insecure Application Logic Utilizing Active Merchant [CRITICAL NODE]\n        *   Bypass Payment Processing Logic [HIGH-RISK PATH]\n            *   Manipulate Request Parameters Before Sending to Active Merchant [HIGH-RISK PATH]\n            *   Replay Successful Payment Requests [HIGH-RISK PATH]\n        *   Leak Sensitive Payment Information [HIGH-RISK PATH]\n            *   Information Disclosure via Error Messages from Active Merchant [HIGH-RISK PATH]\n            *   Insecure Logging of Sensitive Data Handled by Active Merchant [HIGH-RISK PATH]\n        *   Abuse Refund/Void Functionality if Exposed Insecurely [HIGH-RISK PATH]\n        *   Exploit Insecure Webhook Handling (if applicable) [HIGH-RISK PATH]\n            *   Spoof Webhook Requests Mimicking Gateway Responses [HIGH-RISK PATH]\n            *   Manipulate Webhook Data Processed After Active Merchant Interaction [HIGH-RISK PATH]", "attack_sub_tree_paths": [{"title": "Compromise Application Using Active Merchant [CRITICAL NODE]", "text": "This is the root goal of the attacker and represents the ultimate success in exploiting the application through its use of Active Merchant."}, {"title": "Exploit Insecure Configuration [CRITICAL NODE]", "text": "This category of attacks targets weaknesses in how the application is set up and configured to use Active Merchant. Insecure configuration can directly expose sensitive information or create pathways for other attacks."}, {"title": "Expose API Credentials [CRITICAL NODE]", "text": "If the application's API credentials for the payment gateway are exposed, an attacker can directly interact with the gateway as the legitimate application, bypassing application logic."}, {"title": "Hardcoded Credentials [HIGH-RISK PATH]", "text": "Credentials directly written into the application code are easily discoverable through static analysis or by gaining access to the codebase."}, {"title": "Insecure Storage (e.g., plain text config files) [HIGH-RISK PATH]", "text": "Storing credentials in plain text configuration files or easily accessible locations on the server allows for unauthorized access through file system access or other vulnerabilities."}, {"title": "Exploit Vulnerabilities within Active Merchant", "text": "This category focuses on exploiting weaknesses directly within the Active Merchant library itself."}, {"title": "Exploit Known Vulnerabilities", "text": null}, {"title": "Use Outdated Version with Known Exploits [HIGH-RISK PATH]", "text": "Failing to update Active Merchant to the latest version leaves the application vulnerable to publicly known exploits that have been patched in newer releases."}, {"title": "Exploit Insecure Application Logic Utilizing Active Merchant [CRITICAL NODE]", "text": "This category encompasses vulnerabilities arising from flaws in the application's code that integrates with and uses the Active Merchant library."}, {"title": "Bypass Payment Processing Logic [HIGH-RISK PATH]", "text": "Flaws in the application's code can allow attackers to circumvent the intended payment processing flow."}, {"title": "Manipulate Request Parameters Before Sending to Active Merchant [HIGH-RISK PATH]", "text": "Modifying parameters (e.g., amount, currency) before they are passed to Active Merchant can lead to incorrect transaction amounts being processed."}, {"title": "Replay Successful Payment Requests [HIGH-RISK PATH]", "text": "Capturing and replaying successful payment requests can allow attackers to gain goods or services without paying again if proper idempotency measures are not in place."}, {"title": "Leak Sensitive Payment Information [HIGH-RISK PATH]", "text": "The application might unintentionally expose sensitive data handled by Active Merchant."}, {"title": "Information Disclosure via Error Messages from Active Merchant [HIGH-RISK PATH]", "text": "Displaying raw or overly detailed error messages from Active Merchant can reveal sensitive information about the payment process or gateway responses to users."}, {"title": "Insecure Logging of Sensitive Data Handled by Active Merchant [HIGH-RISK PATH]", "text": "Logging full credit card numbers, CVV codes, or other sensitive transaction details in application logs creates a significant security vulnerability if these logs are compromised."}, {"title": "Abuse Refund/Void Functionality if Exposed Insecurely [HIGH-RISK PATH]", "text": "If the application exposes refund or void functionalities without proper authorization checks, an attacker could abuse Active Merchant's methods to initiate unauthorized refunds, leading to financial loss."}, {"title": "Exploit Insecure Webhook Handling (if applicable) [HIGH-RISK PATH]", "text": "If the application uses webhooks for payment confirmations or updates, vulnerabilities in how these webhooks are handled can be exploited."}, {"title": "Spoof Webhook Requests Mimicking Gateway Responses [HIGH-RISK PATH]", "text": "Sending fake webhook requests that mimic the structure and content of legitimate gateway responses can trick the application into believing a fraudulent payment was successful."}, {"title": "Manipulate Webhook Data Processed After Active Merchant Interaction [HIGH-RISK PATH]", "text": "Exploiting vulnerabilities in how the application processes webhook data received after Active Merchant has interacted with the gateway can allow attackers to manipulate order status or other critical data."}]}. Got: 1 validation error for AttackTreeAnalysis
attack_sub_tree_paths.6.text
  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-01-09 18:37:37,442 - __main__ - INFO - Starting AI Security Analyzer
2025-01-09 18:37:37,480 - ai_security_analyzer.github2at_agents - INFO - Internal step 1 of 4
2025-01-09 18:37:53,575 - ai_security_analyzer.github2at_agents - INFO - Internal step 2 of 4
2025-01-09 18:38:08,846 - ai_security_analyzer.github2at_agents - INFO - Internal step 3 of 4
2025-01-09 18:38:20,743 - ai_security_analyzer.github2at_agents - INFO - Internal step 4 of 4
2025-01-09 18:38:25,730 - ai_security_analyzer.github2at_agents - INFO - Getting intermediate response
2025-01-09 18:38:25,730 - ai_security_analyzer.github2at_agents - INFO - Getting structured attack tree path analysis
2025-01-09 18:38:30,005 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 1 of 3
2025-01-09 18:38:44,106 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 2 of 3
2025-01-09 18:38:59,774 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree path details 3 of 3
2025-01-09 18:39:15,012 - ai_security_analyzer.github2at_agents - INFO - Getting attack tree paths final response
2025-01-09 18:39:15,013 - ai_security_analyzer.graphs - INFO - Actual token usage: 41946
2025-01-09 18:39:15,013 - __main__ - INFO - AI Security Analyzer completed successfully
