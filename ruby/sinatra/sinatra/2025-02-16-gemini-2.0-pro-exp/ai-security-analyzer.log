Unable to find image 'ghcr.io/xvnpw/ai-security-analyzer:latest' locally
latest: Pulling from xvnpw/ai-security-analyzer
1f3e46996e29: Pulling fs layer
dfb81f221332: Pulling fs layer
69d04f35a207: Pulling fs layer
5c3947958a83: Pulling fs layer
b9be2ce5276b: Pulling fs layer
8b438fc1cd11: Pulling fs layer
28d645c00242: Pulling fs layer
921df71b230f: Pulling fs layer
c457853b6d82: Pulling fs layer
37e00e2d9431: Pulling fs layer
d3f883494790: Pulling fs layer
5c3947958a83: Waiting
b9be2ce5276b: Waiting
28d645c00242: Waiting
37e00e2d9431: Waiting
8b438fc1cd11: Waiting
c457853b6d82: Waiting
d3f883494790: Waiting
1f3e46996e29: Verifying Checksum
1f3e46996e29: Download complete
dfb81f221332: Verifying Checksum
dfb81f221332: Download complete
1f3e46996e29: Pull complete
5c3947958a83: Download complete
69d04f35a207: Verifying Checksum
69d04f35a207: Download complete
b9be2ce5276b: Verifying Checksum
b9be2ce5276b: Download complete
28d645c00242: Verifying Checksum
28d645c00242: Download complete
8b438fc1cd11: Verifying Checksum
8b438fc1cd11: Download complete
921df71b230f: Download complete
d3f883494790: Verifying Checksum
d3f883494790: Download complete
37e00e2d9431: Verifying Checksum
37e00e2d9431: Download complete
dfb81f221332: Pull complete
69d04f35a207: Pull complete
5c3947958a83: Pull complete
b9be2ce5276b: Pull complete
c457853b6d82: Verifying Checksum
c457853b6d82: Download complete
8b438fc1cd11: Pull complete
28d645c00242: Pull complete
921df71b230f: Pull complete
c457853b6d82: Pull complete
37e00e2d9431: Pull complete
d3f883494790: Pull complete
Digest: sha256:de5354acec6e1b13185500d521e5a9e27b7ac4e65c267bb3a5c82deb7c8475f5
Status: Downloaded newer image for ghcr.io/xvnpw/ai-security-analyzer:latest
2025-02-16 05:28:09,972 - __main__ - INFO - Starting AI Security Analyzer
2025-02-16 05:28:10,036 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 1
2025-02-16 05:29:18,557 - ai_security_analyzer.graphs - INFO - Actual token usage: 10965
2025-02-16 05:29:18,561 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739683760.851080       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-16 05:29:25,225 - __main__ - INFO - Starting AI Security Analyzer
2025-02-16 05:29:25,285 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-16 05:29:54,171 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-16 05:30:22,868 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-16 05:33:25,518 - ai_security_analyzer.graphs - INFO - Actual token usage: 31227
2025-02-16 05:33:25,529 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739684007.828945       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-16 05:33:32,190 - __main__ - INFO - Starting AI Security Analyzer
2025-02-16 05:33:32,249 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-16 05:33:54,222 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-16 05:34:21,121 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-16 05:34:44,541 - ai_security_analyzer.graphs - ERROR - Graph execution failed: Invalid json output: ```json
{
  "attack_surfaces": [
    {
      "title": "1. Route Parameter Injection/Manipulation",
      "text": "*   **Description:** Attackers inject malicious input into route parameters to bypass security checks, access unauthorized resources, or execute unintended code.\n*   **Sinatra Contribution:** Sinatra's flexible routing system (e.g., `/:param`, `/*`) allows for dynamic route matching, making it susceptible if parameters are not rigorously validated. Sinatra *does not* inherently validate parameter types or content. This is the core issue.\n*   **Example:**\n    *   Route: `/files/:filename`\n    *   Attack: `/files/../../etc/passwd` (Path Traversal)\n    *   Attack: `/users/1;drop table users;` (if the parameter is directly used in a SQL query - the route parameter is the *entry point*).\n*   **Impact:** Data breaches, unauthorized access, code execution, application compromise.\n*   **Risk Severity:** High to Critical (depending on how the parameter is used).\n*   **Mitigation Strategies:**\n    *   **Strict Input Validation:** Use regular expressions to enforce expected parameter formats (e.g., `params[:id].match?(/\A\\d+\\z/)` for numeric IDs).\n    *   **Type Enforcement:** Ensure parameters are of the expected data type (e.g., convert to integer using `to_i` *after* validation).\n    *   **Whitelist Approach:** Only allow specific, known-good values for parameters.\n    *   **Sinatra Conditions:** Use route conditions to constrain parameters directly in the route definition (e.g., `get '/users/:id', :id => /\\d+/ do ... end`).\n    *   **Avoid Direct Use:** Never use route parameters directly in file system operations, database queries, or shell commands without proper escaping and sanitization."
    },
    {
      "title": "2. Unintended Route Matching (Overly Broad Routes)",
      "text": "*   **Description:** Attackers craft requests that unintentionally match overly broad routes (e.g., using splats `/*` or loose regular expressions), bypassing intended security controls.\n*   **Sinatra Contribution:** Sinatra's route matching is order-dependent and allows for very broad patterns. If not carefully designed, a less specific route can \"shadow\" a more specific one. This is a direct consequence of Sinatra's routing design.\n*   **Example:**\n    *   Routes: `/admin/*` (intended for authenticated users), `/public/*`\n    *   Attack: A request to `/admin/login` might match `/public/*` if it's defined *before* `/admin/*`, bypassing authentication.\n*   **Impact:** Unauthorized access to sensitive areas, bypassing authentication/authorization.\n*   **Risk Severity:** High.\n*   **Mitigation Strategies:**\n    *   **Specific Routes:** Define routes as specifically as possible. Avoid overly broad splats or regular expressions.\n    *   **Route Order:** Order routes from *most specific* to *least specific*.\n    *   **Route Testing:** Thoroughly test routing logic with a wide range of inputs.\n    *   **Route Visualization:** Use tools (if available) to visualize the routing table."
    },
    {
      "title": "3. Template Injection (Distinct from XSS)",
      "text": "*   **Description:** Attackers inject malicious code into the templating engine itself, allowing for arbitrary code execution within the server-side templating context.\n*   **Sinatra Contribution:** Sinatra supports various templating engines (ERB, Haml, Slim, etc.). The vulnerability arises when user input is *directly* embedded into the template *code* (not data), which is a misuse facilitated by Sinatra's template integration.\n*   **Example:**\n    *   Template (ERB): `<%= params[:user_input] %>`\n    *   Attack: `user_input = \"<% system('rm -rf /') %>\"` (Executes a shell command).\n*   **Impact:** Complete server compromise, arbitrary code execution.\n*   **Risk Severity:** Critical.\n*   **Mitigation Strategies:**\n    *   **Data, Not Code:** *Never* directly embed user input into template code. Always pass user input as *data* to the template.\n    *   **Templating Engine Escaping:** Use the appropriate escaping functions (e.g., `h` in ERB, `=h` in Haml).\n    *   **Auto-Escaping Engines:** Consider using templating engines with automatic escaping (e.g., Slim)."
    },
    {
      "title": "4. Default Session Secret",
      "text": "*   **Description:** Using Sinatra's default session secret makes the application vulnerable to session hijacking.\n*   **Sinatra Contribution:** Sinatra *provides* a default secret if none is explicitly configured, making it easy to overlook this critical security setting. This is a direct Sinatra issue.\n*   **Impact:** Session hijacking, unauthorized access to user accounts.\n*   **Risk Severity:** Critical.\n*   **Mitigation Strategies:**\n    *   **Custom Secret:** *Always* set a strong, randomly generated session secret in the application configuration (e.g., `set :session_secret, 'your_long_random_secret'`)."
    },
    {
      "title": "5. HTTP Verb Confusion/Tampering",
      "text": "*   **Description:** Attackers use unexpected HTTP verbs (e.g., `HEAD`, `OPTIONS`, `TRACE`, or even a custom verb) to bypass security checks or access routes intended for different verbs.\n*   **Sinatra Contribution:** Sinatra allows defining routes for specific verbs, but if a route is only defined for, say, `POST`, it might be implicitly accessible via `GET` unless explicitly handled. This behavior is specific to how Sinatra handles HTTP verbs.\n*   **Example:**\n    *   Route: `post '/submit' do ... end` (intended to handle form submissions)\n    *   Attack: A `GET` request to `/submit` might bypass validation or leak information if the application doesn't explicitly reject it.\n*   **Impact:** Information disclosure, bypassing security controls, unintended actions.\n*   **Risk Severity:** High\n*   **Mitigation Strategies:**\n    *   **Explicit Verb Handling:** Define routes for *all* expected HTTP verbs.\n    *   **Verb Rejection:** If a route should only be accessible via a specific verb, explicitly reject other verbs (e.g., using a `before` filter or within the route itself).  Return a 405 Method Not Allowed status.\n    *   **Middleware:** Consider using a middleware that enforces allowed HTTP methods for all routes."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-02-16 05:34:44,543 - __main__ - ERROR - Application error: Invalid json output: ```json
{
  "attack_surfaces": [
    {
      "title": "1. Route Parameter Injection/Manipulation",
      "text": "*   **Description:** Attackers inject malicious input into route parameters to bypass security checks, access unauthorized resources, or execute unintended code.\n*   **Sinatra Contribution:** Sinatra's flexible routing system (e.g., `/:param`, `/*`) allows for dynamic route matching, making it susceptible if parameters are not rigorously validated. Sinatra *does not* inherently validate parameter types or content. This is the core issue.\n*   **Example:**\n    *   Route: `/files/:filename`\n    *   Attack: `/files/../../etc/passwd` (Path Traversal)\n    *   Attack: `/users/1;drop table users;` (if the parameter is directly used in a SQL query - the route parameter is the *entry point*).\n*   **Impact:** Data breaches, unauthorized access, code execution, application compromise.\n*   **Risk Severity:** High to Critical (depending on how the parameter is used).\n*   **Mitigation Strategies:**\n    *   **Strict Input Validation:** Use regular expressions to enforce expected parameter formats (e.g., `params[:id].match?(/\A\\d+\\z/)` for numeric IDs).\n    *   **Type Enforcement:** Ensure parameters are of the expected data type (e.g., convert to integer using `to_i` *after* validation).\n    *   **Whitelist Approach:** Only allow specific, known-good values for parameters.\n    *   **Sinatra Conditions:** Use route conditions to constrain parameters directly in the route definition (e.g., `get '/users/:id', :id => /\\d+/ do ... end`).\n    *   **Avoid Direct Use:** Never use route parameters directly in file system operations, database queries, or shell commands without proper escaping and sanitization."
    },
    {
      "title": "2. Unintended Route Matching (Overly Broad Routes)",
      "text": "*   **Description:** Attackers craft requests that unintentionally match overly broad routes (e.g., using splats `/*` or loose regular expressions), bypassing intended security controls.\n*   **Sinatra Contribution:** Sinatra's route matching is order-dependent and allows for very broad patterns. If not carefully designed, a less specific route can \"shadow\" a more specific one. This is a direct consequence of Sinatra's routing design.\n*   **Example:**\n    *   Routes: `/admin/*` (intended for authenticated users), `/public/*`\n    *   Attack: A request to `/admin/login` might match `/public/*` if it's defined *before* `/admin/*`, bypassing authentication.\n*   **Impact:** Unauthorized access to sensitive areas, bypassing authentication/authorization.\n*   **Risk Severity:** High.\n*   **Mitigation Strategies:**\n    *   **Specific Routes:** Define routes as specifically as possible. Avoid overly broad splats or regular expressions.\n    *   **Route Order:** Order routes from *most specific* to *least specific*.\n    *   **Route Testing:** Thoroughly test routing logic with a wide range of inputs.\n    *   **Route Visualization:** Use tools (if available) to visualize the routing table."
    },
    {
      "title": "3. Template Injection (Distinct from XSS)",
      "text": "*   **Description:** Attackers inject malicious code into the templating engine itself, allowing for arbitrary code execution within the server-side templating context.\n*   **Sinatra Contribution:** Sinatra supports various templating engines (ERB, Haml, Slim, etc.). The vulnerability arises when user input is *directly* embedded into the template *code* (not data), which is a misuse facilitated by Sinatra's template integration.\n*   **Example:**\n    *   Template (ERB): `<%= params[:user_input] %>`\n    *   Attack: `user_input = \"<% system('rm -rf /') %>\"` (Executes a shell command).\n*   **Impact:** Complete server compromise, arbitrary code execution.\n*   **Risk Severity:** Critical.\n*   **Mitigation Strategies:**\n    *   **Data, Not Code:** *Never* directly embed user input into template code. Always pass user input as *data* to the template.\n    *   **Templating Engine Escaping:** Use the appropriate escaping functions (e.g., `h` in ERB, `=h` in Haml).\n    *   **Auto-Escaping Engines:** Consider using templating engines with automatic escaping (e.g., Slim)."
    },
    {
      "title": "4. Default Session Secret",
      "text": "*   **Description:** Using Sinatra's default session secret makes the application vulnerable to session hijacking.\n*   **Sinatra Contribution:** Sinatra *provides* a default secret if none is explicitly configured, making it easy to overlook this critical security setting. This is a direct Sinatra issue.\n*   **Impact:** Session hijacking, unauthorized access to user accounts.\n*   **Risk Severity:** Critical.\n*   **Mitigation Strategies:**\n    *   **Custom Secret:** *Always* set a strong, randomly generated session secret in the application configuration (e.g., `set :session_secret, 'your_long_random_secret'`)."
    },
    {
      "title": "5. HTTP Verb Confusion/Tampering",
      "text": "*   **Description:** Attackers use unexpected HTTP verbs (e.g., `HEAD`, `OPTIONS`, `TRACE`, or even a custom verb) to bypass security checks or access routes intended for different verbs.\n*   **Sinatra Contribution:** Sinatra allows defining routes for specific verbs, but if a route is only defined for, say, `POST`, it might be implicitly accessible via `GET` unless explicitly handled. This behavior is specific to how Sinatra handles HTTP verbs.\n*   **Example:**\n    *   Route: `post '/submit' do ... end` (intended to handle form submissions)\n    *   Attack: A `GET` request to `/submit` might bypass validation or leak information if the application doesn't explicitly reject it.\n*   **Impact:** Information disclosure, bypassing security controls, unintended actions.\n*   **Risk Severity:** High\n*   **Mitigation Strategies:**\n    *   **Explicit Verb Handling:** Define routes for *all* expected HTTP verbs.\n    *   **Verb Rejection:** If a route should only be accessible via a specific verb, explicitly reject other verbs (e.g., using a `before` filter or within the route itself).  Return a 405 Method Not Allowed status.\n    *   **Middleware:** Consider using a middleware that enforces allowed HTTP methods for all routes."
    }
  ]
}
```
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE . You can try to run with --resume to resume from last checkpoint.
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739684086.843789       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-16 05:35:01,220 - __main__ - INFO - Starting AI Security Analyzer
2025-02-16 05:35:01,287 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-16 05:35:28,251 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-16 05:35:55,404 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-16 05:38:41,729 - ai_security_analyzer.graphs - INFO - Actual token usage: 31351
2025-02-16 05:38:41,738 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739684324.104412       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-16 05:38:48,497 - __main__ - INFO - Starting AI Security Analyzer
2025-02-16 05:38:48,556 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 4
2025-02-16 05:39:16,926 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 4
2025-02-16 05:39:41,102 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 4
2025-02-16 05:40:04,677 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 4 of 4
2025-02-16 05:44:00,901 - ai_security_analyzer.graphs - INFO - Actual token usage: 48444
2025-02-16 05:44:00,913 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739684643.201791       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
2025-02-16 05:44:07,620 - __main__ - INFO - Starting AI Security Analyzer
2025-02-16 05:44:07,682 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 1 of 3
2025-02-16 05:44:35,889 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 2 of 3
2025-02-16 05:45:05,562 - ai_security_analyzer.github2_deep_base_agents - INFO - Running internal step 3 of 3
2025-02-16 05:46:53,365 - ai_security_analyzer.graphs - INFO - Actual token usage: 27345
2025-02-16 05:46:53,374 - __main__ - INFO - AI Security Analyzer completed successfully
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739684815.728024       1 init.cc:232] grpc_wait_for_shutdown_with_timeout() timed out.
